{"pages":[{"title":"About","text":"我是谁 来自深圳职业技术学院的一名软件专业大二学生 菜鸟Web后端开发，伪系统运维 兴趣爱好 逛技术论坛、Github等 倒腾各种软硬件设备 联系我 QQ: 1134031392 Email: hsojo@qq.com","link":"/about.html"}],"posts":[{"title":"【汉化】11月的阿卡迪亚","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言在数个月前我听到了这游戏的OP，感觉挺好听的。然后找了一下这个游戏，发现并没有汉化版，甚至连开坑的消息都没有，个人开坑的不算，谁知道整到什么时候。 于是乎，我花了2天时间来进行程序的分析及修改。（初版完成） 后来又花了4天时间，对乱码文本进行修复。（解析完善） 最后，加上写这篇文章的时间，便是一周了。 操作环境系统：macOS+Windows 软件：AnimED,010editor,LordPE,Python3.6,ollydbg,易语言/C/C++/…（能编译windows动态链接库就行） 软件请自行下载／安装，纯windows亦可操作。 资源汉化资源汉化过程： 使用AnimED对游戏目录下arc文件解包。 使用AnimED对解包后内容进行解析。（崩溃了） 使用Python3对解包后内容进行解析。 对资源进行汉化处理。 使用AnimED对解包后内容重新打包。（也崩溃了） 使用Python3对解包后内容重新打包。 BGI2_Archive解包这是汉化文本的第一步,过程如图。 解压出来的都是解密后的文件。 对此我曾尝试用Python来编写解包工具，arc文件解析出来了，能正常解包。 但是里面的文件都被DSC算法（可能是buriko的独家算法）加密了，由于我能力不足，对此没辙了。 虽然AnimED是开源的（delphi写的，pascal语言），我去看了下dsc算法的方法，试着用python抄了下来，可是解析失败，细节太多了，于是就放弃了。 BGI2_Script解析这就是汉化文本的关键了。游戏的所有文本都存放在这个脚本里面。 看到AnimED里有个Script Tool，我天真的以为这玩意能解析脚本，结果一点，然后就没有然后了，TM的单纯是个按钮。 BGI2_Script结构使用010editor进行分析。 Freemind文件下载 BGI2_Script指令还是使用010editor进行分析。 经过一番痛苦的猜测，测试，已知指令如下: key为command id value[‘param’]为参数数量 12345678910111213141516171819202122232425{ # body 0: {'param': 1}, # 00 00 00 00 1: {'param': 1}, # 01 00 00 00 2: {'param': 0}, # 02 00 00 00 3: {'param': 1}, # 03 00 00 00, text 4: {'param': 0}, # 04 00 00 00 9: {'param': 0}, # 09 00 00 00 16: {'param': 0}, # 10 00 00 00 17: {'param': 0}, # 11 00 00 00 24: {'param': 0}, # 18 00 00 00 25: {'param': 1}, # 19 00 00 00 27: {'param': 1}, # 1b 00 00 00, end 28: {'param': 0}, # 1c 00 00 00 32: {'param': 0}, # 20 00 00 00 33: {'param': 0}, # 21 00 00 00 48: {'param': 0}, # 30 00 00 00 56: {'param': 0}, # 38 00 00 00 63: {'param': 2}, # 3f 00 00 00 127: {'param': 2}, # 7f 00 00 00 320: {'param': 0}, # 40 01 00 00 # foot 249: {'param': 0}, # f9 00 00 00 244: {'param': 0}, # f4 00 00 00} BGI2_Script数据BGI2_Script主要包含指令数据以及文本数据（包含BSB）。 指令数据首先按结构图的结构从开始读到Package List，读完List，取得当前位置为code_pos。 读取Command Code - head,参数一为未知，参数二为code_foot_position。 然后按照前面的指令字典，从当前位置一直读到code_foot_position，code_body部分就解析完成了。 code_body部分解析完成时，当前stream的位置必须与code_foot_position相等，否则这个文件也许不是剧本的脚本。 然后开始读code_foot部分，方法和读code_body一样。 顺便读取BSB（其实这个没用，重新封包加上）。 文本数据然后根据之前读取到的command，筛选出command id为3的command（使用文本的命令）。 再在筛选出的内容里筛选出翻译的内容。 这buriko是真的操蛋，文件路径都在里面，否则就不用筛选了。 角色谈话文本的下一位Command id一般为320(40 01 00 00)。 角色名称文本的Command在角色谈话文本之前。 角色线路选项文本的下一位Command id一般为9(09 00 00 00)，下两位为2(02 00 00 00)。 错误文本在code_foot里，下一位Command id一般为249(f9 00 00 00)，下两位为244(f4 00 00 00)。 符合以上条件的文本都需要翻译(translate)。 我筛选的方法如下： 12345678910111213for i in range(len(code_list)): code = code_list[i] if code['cmd_id'] == 3: p0 = code['param'][0] next_cmd_id = code_list[i + 1]['cmd_id'] next_2_cmd_id = code_list[i + 2]['cmd_id'] character_text = next_cmd_id == 320 character_name = next_cmd_id == 3 and next_2_cmd_id == 320 character_select = next_cmd_id == 9 and next_2_cmd_id == 2 error_message = next_cmd_id == 249 and next_2_cmd_id == 244 trans = character_text or character_name or character_select or error_message BGI2_Archive封包还是还是使用010editor进行分析。 Archive的结构是十分的简单，如下图所示。 Freemind文件下载 由于过于简单，不做解释。 程序修改绕过检测由于原程序是japan only的，所以实际上我们并不能运行。 方法一使用ollydbg对原程序进行修改。 按下ctrl+n，在弹出的api列表中寻找GetSystemDefaultLangID，然后按Enter查找调用位置。 在简体中文环境下，GetSystemDefaultLangID 返回值是 0x804，而在日语环境下，返回值是 0x411。按空格对代码进行修改，直接返回0x411。 修改前： 修改后： 右键模块窗口，对修改进行保存： 方法二使用apihook对程序进行注入。 用易语言编写一个动态链接库，在启动时把KERNEL32的GetSystemDefaultLangID给hook掉，修改返回值为1041(0x411)。 当然，也可以用C／C++来写这个动态链接库，只是我不会而已。 然后使用LordPE进行静态注入，即把该dll添加到程序的入口（随便做个方法就好，比如我这是test），这样程序运行时便会自动被dll把api hook掉。 修改文本显示虽然前面的资源汉化了，但是程序本身是日文环境的，读取汉化资源就会导致乱码，所以就要做以下的修改。 修改编码由于我并不熟悉OD，所以只能以hook的方式来修改。 和之前的hook同理，这次hook的方法是以下两个： GDI32的CreateFontA，把fdwCharSet参数修改为134(0x86)，同时可以在此处hook字体的参数，做个配置项，就可以随时更换字体了。 KERNEL32的MultiByteToWideChar，把CharSet参数修改为936(0x3A8)。 以上方法任一没有hook，都会导致乱码。 修改字符边界编码修改了，但是程序还是乱码，这是由于字符边界的关系，把某些字符过滤掉了。 gbk字符边界: 0x80-0xFE shift_jis字符边界：0x80-0xA0 这里需要使用OD对程序进行修改。 按下ctrl+f进行搜索，内容为cmp al,0xA0。 然后把所有见到的cmp al,0xA0都修改成cmp al,0xFE。 这样子程序就能正常加载gbk编码的资源了。 退出崩溃由于进行了hook，程序退出的时候，hook找不到原来的地址发生了崩溃。 由于能力不足，没法从源头解决。所以我选择把这个问题堵掉。 还是hook，这次把USER32的DestroyWindow hook掉，当destroy的句柄为游戏的窗口时，强制把自身的进程杀掉，于是关闭就不会崩溃了，嗯，完美。","link":"/2017/10/18/11GatsuNoArcadia/"},{"title":"关于vsftpd的那些琐碎事","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言由于一直没有把ftp错误排查方法记录下来，一段时间之后忘记后就又要重复踩坑，今天又踩了一遍，为避免日后再踩，特以此篇文章以作记录。 各种坑点先把想到的写下来，一时想不起来所有问题。 通用 确保selinux已关闭（不考虑selinux） 登录失败 确保用户拥有目录的读权限（文件权限） 新版vsftpd确保参数allow_writeable_chroot（allow_writable_chroot,这是另一版本）设定为YES 上传失败 如使用linux的命令行ftp工具，务必确保目标路径正确（被这个假象骗了好几次） 确保用户拥有目录的写权限（文件权限） 若使用虚拟（匿名）用户，确保anon_mkdir_write_enable、anon_other_write_enable、anon_upload_enable均设定为YES","link":"/2018/03/26/AboutFTP/"},{"title":"关于Emoji在Ansi编码上的问题","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言近期开发微信项目，其中消息转发部分遇到了个问题。 当被转发的消息包含emoji表情时，在utf8转unicode的过程中因为编码不支持emoji字符，导致emoji表情变成了乱码（?）。 折腾半天，emoji是没办法转ansi了，但是可以通过字典的方式转成其他可解析字符来实现无损转换。 解决方案遍历emoji码表进行替换成可解析字符，如“🌞”替换成“:sun:”。 字典可以从以下project获取。 以下是emoji在各语言中转码的project： 点击查看 由于我用的是某不起眼语言，所以我通过python生成一个字典用于转码。 1Ojo-Laptop:~ hsojo$ pip3 install emoji 1234567891011from emoji.unicode_codes import EMOJI_ALIAS_UNICODEcontent = ''for k,v in EMOJI_ALIAS_UNICODE.items(): if content != '': content += '\\n' content += '%s|%s' % (k, v)with open('emoji.txt', 'w') as io: io.write(content) 这样只要用其他语言加载好字典，然后进行替换即可。","link":"/2018/08/20/AboutEmojiOnAnsi/"},{"title":"安卓应用全屏适配（游戏）","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言在前些日子中，DFQ默认的全屏方案在各种花里胡哨的安卓手机屏幕（如水滴屏、额头屏等全面屏）中出现大黑边。 在游戏应用中，如果两边有黑边，自然是玩起来不舒服的；所以只能寻找解决方案进行适配。 经过一番搜寻、实践，发现问题意外的简单。 解决方案只需要在AndroidManifest.xml中对应的Application 标签中，添加以下内容即可： 123&lt;meta-data android:name=\"android.max_aspect\" android:value=\"2.3\" /&gt; 添加以后，绝大部分的机型都能自动适应。 AndroidManifest.xml文件大致如下所示： 123456789101112131415161718192021222324&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.koiyun.dfq\" android:installLocation=\"auto\" android:versionCode=\"12\" android:versionName=\"1.0.0\"&gt; &lt;!-- 权限之类的内容 --&gt; &lt;application android:allowBackup=\"true\" android:icon=\"@drawable/icon\" android:label=\"DF·Quest\" android:theme=\"@android:style/Theme.NoTitleBar.Fullscreen\"&gt; &lt;!-- 在此处添加 --&gt; &lt;meta-data android:name=\"android.max_aspect\" android:value=\"2.3\" /&gt; &lt;!-- Activity 标签的内容 --&gt; &lt;/application&gt; &lt;uses-feature android:glEsVersion=\"0x00020000\" /&gt;&lt;/manifest&gt;","link":"/2019/10/23/AndroidFullScreenAdapt/"},{"title":"C&#x2F;C++ WinApiHook注意调用方式！！！","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言在前段时间使用易语言hook的方式，实现了《11月的阿卡迪亚》的部分汉化，当时只是抱着试一试的心态，不过既然成功了，就当然想要深入的理解和研究。 最近又发现了个有趣的エロ游戏，于是乎我又打算尝试汉化，不过机会渺茫，没有搞懂资源结构，但是修改程序使其支持中文显示，应该还是可以的。 然后在尝试Hook某些API的时候，程序崩溃了，研究了整整一天才发现原因，So,写篇文章记录下来。 过程放弃易语言于是乎使用OllyDbg分析了一波api，发现这次的程序创建字体使用的是CreateFontIndirectA，传入参数是一个结构体，这d*g sh*t 易语言涉及到结构体的参数就不好处理，由于并不打算再深入研究易语言，So 我花了两天时间学习了C++。 使用C++ &amp; MHook虽然搞懂了C++的基本使用，不过我还不打算直接就干新的程序，首先参考之前汉化《11月的阿卡迪亚》做一个C++ Ver的Hooker替代易语言Ver的Hooker，了解了一番C++ APIHook后，我选择了使用MHook库，方便。 传统Hook &amp; MHook的区别 传统Hook 调用被Hook的API时一般分为以下几步，比较繁琐。 调用Hooked API 跳转到Hook Func 暂停Hook 修改参数并调用True Func 恢复Hook 返回结果 MHook 使用MHook可以简化为以下几步~~ 帮你封装好了 ~~，比较简单，完善。 调用Hooked API 跳转到Hook Func 修改参数并调用True Func 返回结果 注意：在Hook Func里不能调用Hooked API，必须通过True Func来操作原API，否则会崩溃（死循环了）。 开始Hook操作环境系统：Windows 7 软件：Clion &amp; MinGW(CMake),MHook(Source Code),LordPE 修改MHook由于MHook原来是个VC++的project，我所使用的编译环境是CMake(好像是gcc)，某些VC++特性不支持，比如没有某些头文件。 经过一番观察，还好MHook用到VC++的部分都是些debug用的输出内容，将其全部去掉即可，出了问题又不会修。还有一些基础类型不存在，不过有替代的选项，全部换掉即可。 尝试Hook首先Hook的是，KERNEL32-GetSystemDefaultLangID，很轻松的Hook成功了。 于是乎，我傻逼傻逼的以为Hook就这么简单，一口气把之前的所有API的Hook Code都写好了，然后便是噩梦的开始。 莫名崩溃当时我Hook的API有以下： KERNEL32-GetSystemDefaultLangID KERNEL32-MultiByteToWideChar USER32-MessageBoxA GDI32-CreateFontA 当我Hook KERNEL32-MultiByteToWideChar 和 GDI32-CreateFontA的时候，程序是绝对崩溃的，但我Hook KERNEL32-GetSystemDefaultLangID 和 USER32-MessageBoxA是正常的。 这让我很不解，为什么有些API正常，有些就不正常。于是我只Hook KERNEL32来进行测试。 一开始我以为是Hook时传值给API的方式不对，比如MultiByteToWideChar，返回的是转换后的长度，传入的参数lpWideCharStr会被改变，我觉得是引用（&amp;）还有指针（*）的问题。 于是乎我折腾了半天，无果（还tm换回了传统Hook）。 发现问题既然换回传统Hook还不行，我已经在怀疑人生了，然后我去翻阅了一遍原来易语言Ver的code，发现： 我*，才想起来那个程序不是以C的方式调用API（之前也因此崩溃过），而是用更传统的方式。 参考文章后发现，原来Win32 Api都是使用__stdcall的方式调用，我写的Hook Func（没有标记调用方式）默认是以__cdecl的方式调用的。 1._stdcall调用 _stdcall是Pascal程序的缺省调用方式，参数采用从右到左的压栈方式，被调函数自身在返回前清空堆栈。 2._cdecl调用 _cdecl是C/C++的缺省调用方式，参数采用从右到左的压栈方式，传送参数的内存栈由调用者维护。_cdecl约定的函数只能被C/C++调用，每一个调用它的函数都包含清空堆栈的代码，所以产生的可执行文件大小会比调用_stdcall函数的大。 由于Visual C++默认采用_cdecl 调用方式，所以VC中中调用DLL时，用户应使用_stdcall调用约定。 3._fastcall调用 _fastcall调用较快，它通过CPU内部寄存器传递参数。 按C编译方式，_fastcall调用约定在输出函数名前面加“@”符号，后面加“@”符号和参数的字节数，形如@functionname@number。 解决方法在Hook Func前面加上__stdcall标记即可。 1234567891011__stdcall int KERNEL32::hookMultiByteToWideChar( UINT CodePage, DWORD dwFlags, LPCSTR lpMultiByteStr, int cchMultiByte, LPWSTR lpWideCharStr, int cchWideChar) { CodePage = 0x3a8; return KERNEL32::trueMultiByteToWideChar(CodePage, dwFlags, lpMultiByteStr, cchMultiByte, lpWideCharStr,cchWideChar);}","link":"/2017/11/26/ApiHookCall/"},{"title":"AutoFS的妙用--实现按需挂载","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言当我们在linux环境下想要访问一些需要挂载才能使用的文件或目录时，也许你会毫不犹豫的直接mount就好了。 当你经常访问这个文件时，也许你会想，写入开机挂载（/etc/fstab）就好了。 但当你经常访问很多的文件，目录，镜像等等，而且挂载点有些是网络资源时，全部写入开机挂载项就有点不合适了。 而且全部挂载会拖慢开机速度，这时，按需自动挂载就很重要了，而autofs正可以解决这个问题。 使用方法\b首先配置auto.master文件，添加挂载点（本机位置），以及对应的挂载文件（远程位置等信息）。 然后再创建一个对应点挂载配置文件，如/etc/auto.home，格式可以参照自带的auto.misc。 配置好，重启autofs服务即可。 如需使用nfs挂载，则需安装对应的支持库nfs-utils-lib。 /etc/auto.master这里我在最后添加了/home的挂载\b项（几乎原封不动）。 1234567891011121314151617181920212223242526## Sample auto.master file# This is an automounter map and it has the following format# key [ -mount-options-separated-by-comma ] location# For details of the format look at autofs(5).#/misc /etc/auto.misc## NOTE: mounts done from a hosts map will be mounted with the# \"nosuid\" and \"nodev\" options unless the \"suid\" and \"dev\"# options are explicitly given.#/net -hosts## Include central master map if it can be found using# nsswitch sources.## Note that if there are entries for /net or /misc (as# above) in the included master map any keys that are the# same will not be seen as the first read key seen takes# precedence.#/home /etc/auto.home+auto.master /etc/auto.home而这个文件就简单了，由于是自己创建的，能简则简，这里实现了对nfs的挂载。 123# *可以匹配任意名称，而最后的&amp;则是取得匹配到的名称。# 比如我访问本机的/home/user1，当该目录没有挂载时，会自动挂载host机器上的/home/user1到本机。* -fstype=nfs host:/home/&amp;","link":"/2018/04/19/AutoFS/"},{"title":"Apt开启i386软件源","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言在Ubuntu 64位环境下想要安装32位软件，软件包名称正确，但是却找不到对应包。 经过一番研究发现，是因为没有打开32位软件源。 解决方法执行以下命令即可。 12dpkg --add-architecture i386apt update","link":"/2018/05/27/Apti386/"},{"title":"CentOS7 网卡更名","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言近日，在尝试将 CentOS 系统从虚拟机迁移安装到物理机时，发现网卡名称发生了变化。（eno1 -&gt; enp0s1） 但系统中所运行的服务应用与网卡名称有所关联（OVSPort），迁移之后出现了故障。 此时，则需要为网卡进行更名操作。 操作过程 修改引导参数 123vi /etc/default/grub# 在 GRUB_CMDLINE_LINUX 行加上 net.ifnames=0 biosdevname=0GRUB_CMDLINE_LINUX=\"crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet net.ifnames=0 biosdevname=0\" 更新引导脚本 1grub2-mkconfig -o /boot/grub2/grub.cfg 修改网卡配置名称 1234cd /etc/sysconfig/network-scripts/vi ifcfg-enp0s1# ... 将文件中 NAME项 与 DEVICE项 的 enp0s1 修改成 eno1 ...mv ifcfg-enp0s1 ifcfg-eno1 编辑网卡名称规则 12345# 如果没有这个文件，创建一个，并复制以下内容进行修改即可。vi /etc/udev/rules.d/90-eno-pix.rules# This file was automatically generated on systemd updateSUBSYSTEM==\"net\", ACTION==\"add\", DRIVERS==\"?*\", ATTR{address}==\"00:0c:29:97:49:cb\", NAME=\"eno1\" 重新引导 1reboot 后话在旧版本的 Ubuntu/CentOS 系统中常会使用 ethX 的网卡名称。而在最新版本的系统中，却变成了类似 enoX、enpXsX 这样的名称。 为何在新版本的系统中改名了呢？原因其实很简单。 传统方式的网卡命名是简单根据网卡发现顺序决定的（如 CentOS6），命名之后会记录在/etc/udev/ruls.d/70-persistent-net文件中，一个 MAC 地址对应一个名称。 当硬件发生改变时（如更换网卡）那么之前所定义的规则便失效了（MAC地址发生改变），从而导致网络配置文件找不到相应网卡，最后网络无法启动。（虚拟机克隆同理） 而新的网卡命名，则是根据固件中固定的拓扑信息为网卡分配名称。 enoX：主板 BIOS 内置的网卡 ensX：主板 BIOS 内置的 PCI-E 网卡 enpXsX：PCI-E 独立网卡 ethX：以上均不适用时使用","link":"/2019/12/03/CentOS7EtherRename/"},{"title":"CentOS安装不再维护(EOL)的软件","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言随着时代的发展，现在的软件日新月异，软件寿命不断缩短，服务器软件也总是在更新迭代。一些软件很快就被淘汰了。 当这些软件到了EOL（end-of-life）时，官方不再对其软件源维护，这些软件就无法通过包管理进行安装了。（[Error 256] No more mirrors to try./[404] Http Not Found） 然而实际环境总是为了追求稳定性（更新成本巨大？），要使用这些已经淘汰的软件。 今天就遇到了这种情况，特以此篇文章记录。 使用Vault软件源原来的发行版软件源已经无法使用，但官方还是留了一手后路，那就是Vault软件源。 在\b已经失效的软件源里，修改\burl为这个Vault软件源的url，然后clean all &amp; makecache即可。 比如原repo url为： 1234567[base]name=CentOS-$releasever - Basefailovermethod=prioritybaseurl=http://mirrors.aliyun.com/centos/5/os/$basearch/gpgcheck=1gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-5 可以修改为： 123456[base]name=CentOS-$releasever - Basefailovermethod=prioritybaseurl=http://vault.centos.org/5.11/os/$basearch/gpgcheck=0 这样就可以安装已经EOL的软件了，问题解决。 后记 2018-3-11 18:37:35 发现阿里云镜像","link":"/2018/03/01/CentOSVault/"},{"title":"C++之获取数组长度","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言在研究数组排序的过程中，发现了个很基础的问题–如何获取数组长度（成员数）。 似乎C++并没有提供获取数组长度的方法，网上搜索得知sizeof可以计算变量大小，可以通过获取数组大小/成员大小的办法得到数组长度。 当我将这个计算数组长度的方法封装起来时，发现事情并不简单。 1234567int array_length(int ai[]) { return sizeof ai / sizeof ai[0];}int is[] = {2, 4, 1, 3, 6, 5};cout &lt;&lt; sizeof is / sizeof is[0] &lt;&lt; endl; // 输出: 6，right.cout &lt;&lt; array_length(is) &lt;&lt; endl; // 输出: 2，emmmm??? 引用类型编译时说明了原因所在。 1warning: sizeof on array function parameter will return size of 'int *' instead of 'int []' [-Wsizeof-array-argument] 个人理解大概意思就是把数组传入函数，会变成引用类型（指针），即sizeof取得的是指针的size。 详情参考：点击查看 那就操蛋了，程序不封装好，每次想获取长度都tm要写一次sizeof的话，那就太傻逼了。 网上搜索了一下资料，似乎没有办法（不含复制）直接取出指针指向的数组。 模版类型在做数组排序时，需要交换变量，搜索资料的时候发现了一种操作。 12345template &lt;typename T&gt;T minn(T a,T b){ return (a&lt;b)? a:b;} 于是乎，尝试抄袭一下，正确获取到了数组长度。 1234template&lt;typename T&gt;int array_length(T &amp;at) { return sizeof at / sizeof at[0];} 原来只打算做int型数组排序的，结果，套用了这个template之后，全类型数值排序都实现了。 参考资料：点击查看 后话如果想要简单获取length，也许该用vector。 以下为本文实现的排序代码。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263//// Created by HsOjo on 2018/10/31.//#include &lt;iostream&gt;using namespace std;template&lt;typename T&gt;void array_swap(T &amp;at, int ia, int ib) { int t = at[ia]; at[ia] = at[ib]; at[ib] = t;}template&lt;typename T&gt;int array_length(T &amp;at) { return sizeof at / sizeof at[0];}template&lt;typename T&gt;void array_sort(T &amp;at, bool up) { int c, l; l = array_length(at); do { c = 0; if (up) { for (int i = 0; i &lt; l - 1; i++) { if (at[i] &gt; at[i + 1]) { array_swap(at, i, i + 1); c++; } } } else { for (int i = l - 1; i &gt; 0; i--) { if (at[i] &gt; at[i - 1]) { array_swap(at, i, i - 1); c++; } } } } while (c &gt; 0);}int main() { int is[] = {2, 4, 1, 3, 6, 5}; double ds[] = {2.5, 4.1, 1.2, 3.6, 6.123, 5.43, 4.32}; array_sort(is, true); array_sort(ds, false); for (int i: is) { cout &lt;&lt; i &lt;&lt; ' '; } cout &lt;&lt; endl; for (double d: ds) { cout &lt;&lt; d &lt;&lt; ' '; } cout &lt;&lt; endl; return 0;}","link":"/2018/10/31/CppArrayLength/"},{"title":"关于文件共享在ad域与子域名访问的问题","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言长话短说，现需要以简短的域名（类似于主机名）访问文件共享。 比如文件共享服务器于ad域test.com，而需要使用\\\\share的方式直接访问\b共享服务器。 \b一般来说，直接在test.com区域中添加主机记录share即可（即share.test.com），但问题来了，当使用文件共享服务器自身访问的时候，遇到了怎么都登录不上的情况（提示密码错误）。 按理说，这样解析是没问题的，其它机器访问都正常，但坑是不会理会坑外的人的。 数次掉入坑中的我，特以此篇文章以记录逃出坑外的方法。 解决方法不要使用主机记录（A记录）进行解析，换作使用别名记录（CNAME记录）进行解析。","link":"/2018/03/27/ChildADFileShare/"},{"title":"Django 快速入门教程","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言学习web开发是一条艰辛的道路，那些令人讨厌的前端页面总是需要我们\b复制粘贴、复制粘贴，一旦修改，经常要\b同时修改多个文件。 \b页面做的最多的地方无疑是后台管理部分，一个模块，基本就要做出一套页面，比如： 增加内容页面 编辑内容页面（和增加内容的页面大部分内容相同） 内容列表页面（里面还要考虑筛选、搜索功能的实现） 做这些页面做多了，难免心生厌烦，比如我用什么thinkphp，\b一直要复制n套模版，编辑html，替换一些名称什么的，完全就是苦力活。 所以，为了减少这些重复的劳动，Django替我们实现了一个管理后台，能够对我们设计的模型自动生成管理页，且不需要编写html，这听起来很美好，然而这就是事实。 人生苦短，我用Python(Django)！ \b操作环境 系统：*nix（Ubuntu、OS X，Windows No! No! No!） 软件：python3、django、pycharm 安装环境安装Django前需要安装python3，\b我们使用包管理软件安装： （Windows用户请到python官网下载execute installer，这就是不推荐Windows的原因） 1234567# Ubuntu，好像自带python3，没有的话就执行这个吧sudo apt install python3# OS X，使用brew安装，没有brew请执行以下命令/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"# 安装python3brew install python3 当python3安装完成后，在bash中就可以使用pip3进行python3的包管理了。 （Windows需要配置环境变量，execute installer可以在安装时选add to path。） 12# 安装djangopip3 install django 至此Django就安装完成了。 新建项目打开终端，在work space（工作空间）下\b，执行以下\b命令： 12# mysite为\b新建的站点的名称，可自定义。django-admin startproject mysite 创建完成后，项目结构如下所示。 1234567mysite/ manage.py mysite/ __init__.py settings.py urls.py wsgi.py 最外层的mysite是无关紧要的，随时可以重命名，不影响运行。 \bmanage.py，项目的管理器，作用跟django-admin\b一致。 mysite/settings.py，项目的配置\b文件，调试、语言、时区等设置在此配置。 mysite/urls.py，定义了url与各模块之间的关联。 mysite/wsgi.py，用于部署到apache等web服务器\b上，由于纯Python环境亦可运行，小项目并不需要理会这个。 新建模块打开终端，cd到项目目录下，执行以下命令： 12# user是我们将要新建的模块（应用）名称python3 manage.py startapp user \b执行命令后生成的文件如下所示： 123456789user/ migrations/ __init__.py __init__.py admin.py apps.py models.py tests.py views.py migrations，这个目录用于存储自动生成的模型脚本。 __init__.py，这两个文件为空，在Python里，目录下包含\b__init__.py就是把\b目录定义为包。 admin.py，用于将你定义的模型注册到管理平台。 apps.py，疑似用于作为配置文件。 models.py，用于定义你的模型。 test.py，\b用于编写测试代码。 views.py，用于定义视图。 设计模型我们现在完成了用户模块（应用）的创建，但这个模块还是空的，我们现在来设计个账号模型。 \b账号的基本要素，登录名，密码。 以下为user/models.py： 12345678from django.db import models# Create your models here.class Account(models.Model): login = models.CharField(max_length=32) password = models.CharField(max_length=32) 模型设计完成了，还需要在后台对其进行管理，所以我们把这个模型注册到管理系统： 以下为user/admin.py： 123456789101112from django.contrib import adminfrom .models import *# Register your models here.class AccountAdmin(admin.ModelAdmin): list_display = ('login', 'nick')admin.site.register(Account, AccountAdmin) 自动化配置emmmmm，也许你现在在疑惑，怎么不用配置数据库？难道写几行python就能做到数据的存储？数据要去哪里查看？ 其实Django也是需要配置数据库的，但Django实现了数据库的自动\b化建表（当时令我眼前一亮），其他地方也与传统的网站开发相差无几。 Django默认使用sqlite3，这是一个轻型的数据库，以文件的形式存储，不需要登陆到数据库主机什么的，小型项目最佳选择，甚至连配置都不用。 注册模块（应用）当我们要自动配置数据库时，首先要把应用注册到当前站点的配置文件，这样django的管理器才会帮你生成这个应用下的数据表。 我们把user模块添加到INSTALLED_APPS\b list里就OK了，修改如下文件： 以下为mysite/settings.py的片段： 123456789101112131415# ...其它代码...# Application definitionINSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'user',]# ...其它代码... 生成数据库我们已经把模块\b注册好了，接下来就要生成其数据表了，执行以下命令： 1234# \b生成自动生成数据表脚本python3 manage.py makemigrations# 执行自动生成python3 manage.py migrate 至此，数据库已经自动生成好了，\b默认位置是在项目目录下的db.sqlite3，你可以使用sqlite3的数据库管理软件进行打开，对其进行查看。 你可以选择sqlite3以外的数据库，如mysql等等，不过需要另外进行配置，这个\b日后再谈，个人感觉小\b项目并不需要更换数据库。 登陆后台数据库也生成好\b了，现在已经迫不及待的想要进入后台了吧。 首先我们要启动服务器，执行以下\b命令： 12# 如果你使用的是pycharm，直接点右上角的运行就可以了。python3 manage.py runserver 8000 然后你可以通过http://localhost:8000/admin进行\b访问后台。 创建管理员如果你现在打开了后台，你会发现，你没有账号，没法登陆233333333333。 来来来，创建一个，执行以下命令： 12# 创建超级用户python3 manage.py createsuperuser 现在你就可以登陆了，登陆成功的话，如下图： 是不是很棒？自动帮你做好了管理页，虽然有点丑，不过无所谓，后台不是给用户看的。 补充写完之后发现忘了一个地方，那就是settings.py的基本设置。 123456789# Internationalization# https://docs.djangoproject.com/en/1.11/topics/i18n/# LANGUAGE_CODE的设置可以参考django.conf.locale下面的目录名。LANGUAGE_CODE = 'zh-Hans'# 时区请参考以下页面的TZ列。# https://en.wikipedia.org/wiki/List_of_tz_database_time_zonesTIME_ZONE = 'Asia/Shanghai' \b总结\b简单的\b说，我现在看到的Django就是这样，能帮你解决很多繁琐的问题，后台做得很完善，虽然风格跟中国这边的设计差得远了，\b起码不用我去\b整数据库，这一部分就正中我红心了，而且让我接触到了sqlite这轻型数据库，我才知道原来数据库还能这么简单。 以后有空我会继续写Django的文章。","link":"/2018/01/24/DjangoIntro/"},{"title":"初次团队协作整活全流程记录","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言最近与友人AtmosphereMao一同接了一微信小程序的活，途中出现了一些小小意外，故以此总结经验。 整活场景开发的项目为XX报名系统，用于解决招生录取问题。 最初先是完成后端的基本功能开发（5月18日）；前端是在后端基本完成后（5月27日左右）开始开发。 直至今天（6月17日），项目经过了多番整改，终于趋于完成。 技术使用 后台 ThinkCMF（基于ThinkPHP的内容管理框架） 前台（小程序） WePY（腾讯开发的小程序组件化开发框架） 初版需求以下是最初理解的需求，显然很简单。 后台 基本的CRUD功能 根据不同的类别进行数据统计 针对不同类别的报名开关 前台（API） 录入报名数据 查询报名信息 查询录取信息 由于本人只负责后端实现，故前台只提供API。 无尽整改按照前面所展示的初版需求，理论上几天就能完成基本功能；但显然现实不会按预想的来。 首先，得到的需求是不清晰的，客户也不知道具体要如何实现。 所以就出现了做完功能之后，让客户查阅后再根据意见修改，导致开发流程断断续续的情况。 后面追加的3个需求，更是使程序复杂程度直线上升。（从简单的CRUD项目变成复杂的文档处理项目） 追加：录取通知书最初是以文件上传的形式实现，如上传图片/文档。 但是后来客户不满意，需要支持模版，例如根据docx，自动给每个学生生成录取通知书。 但如果从追加需求的时候，就明确需要支持模版，那前面做的上传功能就不会白忙活了。 同时录取通知书需要导出为pdf格式，当时图方便直接就在docx生成完成后接入了pdf转换功能；然而，此处设计不当为后面并发崩溃埋下了祸根。 追加：批量导出/导入数据干就完了，像这种追加的高强度体力活需求，只能要求增加报酬。 追加：报名表下载报名表为xls格式，与录取通知书一致，需要根据模版生成pdf。 由于没有轮子，需要自行实现excel模版替换功能。 Bug：并发情况下崩溃如前文所言，报名表以及录取通知书需要导出PDF。 最初的实现是用户访问文档API时，直接生成相应文档并导出PDF再返回给用户。 然而在大量并发的情况下，LibreOffice进程会直接被打到崩溃，再起不能。 同时发出200个请求，只能成功生成2个文件。 这里可能会有个疑问，为什么需要LibreOffice；原因很简单，PHP原生支持的dompdf/mpdf过于篮子，无法正常使用，只能通过PHP-&gt;Python(unoconv)-&gt;LibreOffice的外挂方式实现PDF转换。 所以当时我发文diss了一把PHP。 为了解决这个问题，肝了一通宵终于解决，同时程序的复杂程度又进一步的提升了。 Bug：数据编辑/删除不完全 这个问题是因为没有使用事务。这是没认真学数据库的后果。 Bug：生僻字无法录入1[10501]SQLSTATE[HY000]: General error: 1366 Incorrect string value: '\\xF0\\xA3\\x84\\x83\\xE8\\x83...' for column 'xxx' at row 1 这个问题是MySQL的毒瘤utf8导致的，换成utf8mb4就好了。 解决方案将用户请求以及文档下载分开处理。 用户请求文档则添加一个任务到数据库，后台使用专门的进程逐个任务进行处理。 使用ThinkPHP的Command控制器配合Shell实现。 这下子成功扛下了200+的请求，怪一开始没设计好。 整改：细枝末节由于客户也没提供样板/设计图；所以像这类整改，多到3页纸都写不完。（已经无力吐槽） 这真是一段艰辛的时光。 改n个地方，增加n*m个Bug 根据需求改完又改，一改再改 客户自己没搞清楚逻辑，提出错误的整改内容 … 前端对接由于前端由友人AtmosphereMao完成，我是比较放心的，一般情况下能接活便是有着十足的把握。 API文档以及测试，我们采用友人XuQing之前跟我提到的EOLINKER，该工具相当好用，非常便于团队协作；可谓是国产Postman。 有了这工具，我们对接的情况可谓是顺风顺水，没什么难度。 Deadline意外然而这个项目的前端需求也并不省心，同样是一改再改；改得多了嘛，就容易出现纰漏。（字段极多） 终于，在临近deadline的时候发生了严重意外，修改完前端工程后忘记commit/push就下线了。 此时，客户更改了需求内容，在代码仓库中的程序仍是旧版本。 尽管需求更改的内容很简单，只是改个文本，但之前也有一连串的需求改动，由于无法获得最新的代码，所以不熟悉wepy框架的我自然是无法更新前端工程的。 幸运的是，最后赶在deadline之前发布了正式版。 总结最终，这个面包车硬生生做成了坦克。 客户的需求是多变的，在需求不清晰的情况下要衡量好是按自己的想法实现或是与客户详细沟通再实现。 否则就会出现做了白做的问题 ，但是沟通成本高啊。 在团队协作项目中，一定要做好版本管理，代码修改完，马上commit &amp; push是最基本的要求。 否则在意外情况下无法联系时，团队其他技术人员无法及时补锅。 保持通讯环境畅通，在接近deadline时不要出现人间蒸发的情况。 可优化项 针对每个API编写相关测试代码，不完整测试可能会导致Bug越改越多。 难怪EOLINKER测试功能收费；听说业内公司，一般开发和测试人数一比一。 学习业内对于并发高负载任务的解决方案，目前的方案过于Hack，泛用性不足。 这种场景，好像是要用消息队列来着 学习更多前端相关知识，否则无法给前端补锅。 去做前端咯","link":"/2020/06/17/FirstTeamwork/"},{"title":"Flask 蓝图嵌套","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言Flask是一个轻量级的python web框架，与django相比，flask抛开了繁琐的配置项等等。 Flask与Django一样，支持模块化开发，使用BluePrint（蓝图）实现。 但是，这个蓝图并不支持嵌套。。 正文当然，我能想到的问题早就有人想到，并解决了。 详情见issue. 解决方案1234567891011121314class NestableBlueprint(Blueprint): \"\"\" Hacking in support for nesting blueprints, until hopefully https://github.com/mitsuhiko/flask/issues/593 will be resolved \"\"\" def register_blueprint(self, blueprint, **options): def deferred(state): url_prefix = (state.url_prefix or u\"\") + (options.get('url_prefix', blueprint.url_prefix) or u\"\") if 'url_prefix' in options: del options['url_prefix'] state.app.register_blueprint(blueprint, url_prefix=url_prefix, **options) self.record(deferred) 使用方法以下为从我的flask demo里复制出来的代码。 123456789101112131415161718192021222324from flask import Blueprintfrom ..libs.nestable_blueprint import NestableBlueprintexam = NestableBlueprint('exam', __name__, template_folder='templates', static_folder='static')exam_admin = NestableBlueprint('exam.admin', __name__, template_folder='templates', static_folder='static')exam_admin_category = Blueprint('exam.admin.category', __name__, template_folder='templates', static_folder='static')exam_admin_question = Blueprint('exam.admin.question', __name__, template_folder='templates', static_folder='static')exam_admin.register_blueprint(exam_admin_category, url_prefix='/category')exam_admin.register_blueprint(exam_admin_question, url_prefix='/question')exam.register_blueprint(exam_admin, url_prefix='/admin')exam_category = Blueprint('exam.category', __name__, template_folder='templates', static_folder='static')exam_question = Blueprint('exam.question', __name__, template_folder='templates', static_folder='static')exam.register_blueprint(exam_category, url_prefix='/category')exam.register_blueprint(exam_question, url_prefix='/question')from . import views, modelsfrom .admin.category import viewsfrom .admin.question import viewsfrom .category import views","link":"/2019/06/13/FlaskNestableBluePrint/"},{"title":"Flask SelectField (Not a vaild choice) 错误解决","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言最近折腾起来Flask，在使用WTForm的时候遇到了一点小问题。 当提交表单时，SelectField项提示错误Not a vaild choice. 正文此时表单代码为： 1234567891011121314class QuestionAddForm(FlaskForm): type = SelectField('类型', choices=list( { 1: '判断题', 2: '单选题', 3: '多选题', }.items() )) # 问题项 rank = IntegerField('难度', validators=[DataRequired()]) title = StringField('题目', validators=[DataRequired()]) data = HiddenField('数据', validators=[DataRequired()]) correct = HiddenField('正确答案', validators=[DataRequired()]) category = SelectField('分类', validators=[DataRequired()]) # 问题项 submit = SubmitField('添加') 表面看上去没有问题，正常使用理应不会出错，但表单提交之后却出现 (Not a vaild choice). 这是因为html里所有的表单数据都是字符串类型，当选项中的 1 提交之后变成了 ‘1’ ，而 ‘1’ 并不在choices之内，导致出错。 解决方案给SelectField添加coerce项，当执行validate_on_submit进行验证时，会进行强制转型再验证。 1234567891011121314class QuestionAddForm(FlaskForm): type = SelectField('类型', coerce=int, choices=list( { 1: '判断题', 2: '单选题', 3: '多选题', }.items() )) rank = IntegerField('难度', validators=[DataRequired()]) title = StringField('题目', validators=[DataRequired()]) data = HiddenField('数据', validators=[DataRequired()]) correct = HiddenField('正确答案', validators=[DataRequired()]) category = SelectField('分类', coerce=int, validators=[DataRequired()]) submit = SubmitField('添加')","link":"/2019/06/13/FlaskSelectError/"},{"title":"Git禁止记住密码","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言在生产环境中部署git项目时，当pull时输入账号密码后，会被Git Bash记住；但如果部署在公共环境下，被记住就不太合适了。 解决方法Git Bash执行以下内容。 1git credential-manager uninstall","link":"/2020/06/12/GitDisableRememberPassword/"},{"title":"你好，Docker","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言以下仅为个人理解，如有错误欢迎纠正。 在很多时候，一个应用开发完成要准备上线，总会发现实际环境布置起来与开发环境有所区别，而出现一些意外的问题。 把应用装进虚拟机，然后再部署上实际环境？这样子的确解决了环境的差异，然而这并不现实，虚拟机损耗太大。 所以经过了很长一段时间，终于有大佬弄出了个解决方案，那就是docker。 docker是一个基于linux系统的容器，核心技术是lxc（linux内核虚拟化），所以只能对linux系统进行虚拟化，容器是与宿主系统完全隔离的，就像是一个高性能linux虚拟机。 搭建环境安装系统：macOS 软件：brew 12345# 安装virtualboxbrew install caskroom/cask/virtualbox# 安装dockerbrew install docker docker-machine 执行以上代码即可完成docker基本组件的安装。 搭建docker环境由于docker基于lxc，所以无法直接在macOS下运行，macOS下通过docker-machine（boot2docker, linux虚拟机）进行linux环境的模拟，windows同理。 12# 使用virtualbox创建名为default的docker machinedocker-machine create -d virtualbox default 基本使用以下为docker的基本使用方法，不定期更新。学到哪写到哪。 docker-machine的基本操作宿主机不为linux系统时，使用docker之前必须配置好docker-machine。 123456789101112131415# [name]不填默认为default# 以下docker-machine简称为DM.# 开启DMdocker-machine start [name]# 关闭DMdocker-machine stop [name]# 重启DMdocker-machine restart [name]# 删除DMdocker-machine rm [name]# 进入控制DMdocker-machine ssh [name]# 配置docker环境变量eval $(docker-machine env [name]) docker的基本操作使用docker前需要先配置环境变量！！！ 123456# 查看docker版本docker version# 查看docker信息docker info# 下载镜像docker pull [OPTIONS] NAME[:TAG|@DIGEST] 各系统下的docker配置文件 Ubuntu /etc/default/docker CentOS /etc/systemd/system/docker.service Boot2Docker (Mac, Windows) /var/lib/boot2docker/profile 配置镜像加速国内的网络，大家都懂的。 打开配置文件，找到“EXTRA_ARGS=”，添加内容： 123# 配置为你的镜像加速地址，比如这里是阿里云--registry-mirror=https://xxxxxxx.mirror.aliyuncs.com# 可选，网易：http://hub-mirror.c.163.com 配置完成后重启DM，查看docker信息可看到镜像地址则配置成功。","link":"/2017/12/13/HelloDocker/"},{"title":"使用&quot;hexo+github pages&quot;免费整个博客","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言在很久以前，就有整个博客的打算。不过在各种原因之下都放弃了，比如搭建个博客需要个服务器，域名什么的。 曾经还利用家里闲置的pc，利用花生壳内网端口映射做了个blog，最后由于花生壳的映射不稳定，以及对pc的电池损耗太大放弃了。（主要是没钱买服务器） 后来，朋友Musoucrow利用github pages+hexo搭了个blog,我才发现，原来github有着免费托管静态网站的服务，我觉得这也是个好的方法，由于有着各种各样的事情，这个blog到现在才开始make。 搭建环境系统：macOS Sierra 软件：brew,npm,node,git,hexo 12345678# 安装brew/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"# 安装npm,node,gitbrew install npmbrew install nodebrew install git# 安装hexonpm install hexo-cli -g 执行以上代码即可完成环境的搭建。 建立仓库注册github如果你已经有github账号就可以跳过此步。点击注册 建立*.github.io仓库格式如图所示，我这个已经建立了，所以提示已存在。 初始化Hexo随便找个位置创建个目录（需要空目录） 然后在终端切换到这个目录，执行以下命令。 1hexo init 这时，hexo已经完成初始化了。 配置Hexo配置文件为”_config.yml” 基本设置 language设置项要结合主题来设置 12345678910111213141516# Hexo Configuration# Docs: https://hexo.io/docs/configuration.html# Source: https://github.com/hexojs/hexo/# Sitetitle: HsOjo Blogsubtitle:description:author: 弱窝(Hs)language: defaulttimezone:# URL# If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://hsojo.github.ioroot: / 主题设置网上找个主题放入”themes”目录即可，默认为”landscape”。 1234# Extensions# Plugins: https://hexo.io/plugins/# Themes: https://hexo.io/themes/theme: hexo-theme-yilia 部署设置在终端运行： 1npm install hexo-deployer-git --save 然后在配置文件添加以下内容（适当修改）： 123456# Deployment# Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: https://github.com/HsOjo/hsojo.github.io branch: master 发表文章打开终端，切换到之前之前初始化hexo的目录。 然后执行以下命令。 1hexo new post 文章标题 hexo会基于”scaffolds/post.md”为模版建立一个空md文件。 生成内容执行以下命令，将自动生成静态网站内容： 1hexo generate 执行之前亦可先清除之前的内容： 1hexo clean 部署测试生成完成之后，可以执行如下命令进行本地测试： 执行后将监听本机的”4000”端口，用浏览器访问即可。 1hexo server 前面的部署设置完成后，可通过如下命令进行同步到github pages： 1hexo deploy 错误解决1{ [Error: Cannot find module './build/xxx/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' } 如发生以上错误，重新安装即可： 12npm uninstall hexo-cli -gnpm install hexo-cli -g","link":"/2017/10/17/HexoBlog/"},{"title":"Kvm USB重定向问题解决","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言最近在使用Ubuntu下的Kvm虚拟机时，无法通过spice将USB设备传入虚拟机。 其中出现以下提示： 1spice-client-error-quark: Could not redirect USB Device [046d:081b] at 3-2: Error setting USB device node ACL: 'Not authorized' (0) 正文解决方案： 修改规则文件：/usr/share/polkit-1/actions/org.spice-space.lowlevelusbaccess.policy 添加allow_any项并修改allow_inactive项即可。 123456789101112131415161718192021&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE policyconfig PUBLIC \"-//freedesktop//DTD PolicyKit Policy Configuration 1.0//EN\" \"http://www.freedesktop.org/standards/PolicyKit/1.0/policyconfig.dtd\"&gt;&lt;policyconfig&gt; &lt;vendor&gt;The Spice Project&lt;/vendor&gt; &lt;vendor_url&gt;http://spice-space.org/&lt;/vendor_url&gt; &lt;icon_name&gt;spice&lt;/icon_name&gt; &lt;action id=\"org.spice-space.lowlevelusbaccess\"&gt; &lt;description&gt;Low level USB device access&lt;/description&gt; &lt;message&gt;Privileges are required for low level USB device access (for usb device pass through).&lt;/message&gt; &lt;defaults&gt; &lt;allow_any&gt;yes&lt;/allow_any&gt; &lt;allow_inactive&gt;yes&lt;/allow_inactive&gt; &lt;allow_active&gt;yes&lt;/allow_active&gt; &lt;/defaults&gt; &lt;/action&gt;&lt;/policyconfig&gt;","link":"/2019/06/15/KvmUSBRedirect/"},{"title":"Linux调整屏幕亮度","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言由于给平板安装了Ubuntu Server系统，在字符界面模式下，亮度一直保持在最高值。 怕是开久了，会把屏幕给烧了，于是乎了解了一下调整亮度的方法。 操作方法需要开机调节的话，可以写入/etc/rc.local。 1234# 查看亮度最大值。cat /sys/class/backlight/intel_backlight/max_brightness# 设置屏幕亮度为最低，0为关闭背光。echo 1 &gt; /sys/class/backlight/intel_backlight/brightness","link":"/2018/05/28/LinuxBrightness/"},{"title":"linux下配置kvm环境","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言今天因学习需要，搭建一个kvm环境，其中踩了一些坑，特以此文章以做记录。 环境 系统：Ubuntu 16.04 安装在Ubuntu下使用apt包管理工具进行安装。（CentOS下使用yum） 1234# 安装虚拟化管理器（包括libvirt）sudo apt install virt-manager# 安装kvmsudo apt install qemu-kvm","link":"/2018/01/31/LibVirtInstall/"},{"title":"Mpk文件格式（STEINS;GATE）","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言近日看石头门0的动画入迷了，想要入手个游戏来玩玩。 近期steam刚好又有打折活动，不过可惜石头门0只有10%折扣，所以还是以后再买了。 但是石头门打折40%，于是乎又想回顾一下剧情，所以就。。。买！买！买！（买情怀） 当我通关全线后，忽然发现壁纸很久没换了，想换套壁纸，上网搜寻一番mpk解包工具，无果，于是乎就萌生了现在这个Mpk文件解析的念头。 文件结构虽然mpk的文件结构简单，但是由于没有足够的样本，并不能推敲出所有参数。 结构分析图为了直观的表达，以下为文件结构分析图。 结构解析 以下带“?”的项为不确定项，有可能为其它情况。 名称 说明 类型 备注 magic 文件\b标识 char[4] 用于判断是否为mpk文件 version 文件版本 int 值：131072，数据：00 00 02 00 count \b文件数量 int 空白 byte[52] 由0填充 files 文件信息 \bfile_info[count] 参考下方结构体 空白 byte[?] 由0填充，大小不定 data 数据 byte[?][count] 大小由file_info决定 file_info(struct) - 文件信息 名称 说明 类型 备注 is_zip 是否压缩？ int 由0填充，估计是int，用于判断\b压缩 index 索引 int offset 偏移位置 long data_size 数据大小 long 值与后者一致，有可能为压缩大小 zip_size 压缩大小？ long 估计为压缩大小，\b但未发现压缩样本 name 文件名 char[224] 有以上信息，已经足以制作提取工具了，所以也不往下探索了。（我只是想要提取cg当壁纸而已） 下载随着分析的完成，接着一番code之后，解包工具完成。 Source Code Windows（拖放文件到exe即可，需要VC2015环境）","link":"/2018/06/25/MpkFormat/"},{"title":"窝逝去的2017","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言转眼间一年又要过去了，在2018即将到来之际，对我在2017年的经历稍作总结。 学业今年可谓是我中专生涯的高潮，通过参加技能竞赛，我成功地解决了升学的难题。 主要获得了以下奖项： 2017年广东省技能竞赛网络搭建及应用项目 一等奖 2017年全国技能竞赛网络搭建及应用项目 二等奖 2017年全国技能竞赛网络空间安全项目 二等奖 以上任意奖项均可获得中职获奖免试机会（省级比赛一等奖/全国比赛一二三等奖）。 So，升学这波稳了（打算报番禺职院）。如果政策不变的话。 补充：政策变了，现报了深圳职院。 在此感谢我的老师、同学、还有所有支持我的朋友。 哦，还有个PhotoShop的技能考证，不过我也轻易的搞定了，还好没抽到难题。 技术当然，在兼顾比赛任务的同时，我也从未放弃过对各种技术的学习、钻研。 今年主要学习还是一些在应用层面的技术，稍微深层次的也有所涉猎，不过由于脑子跟不上，成果不大，还得继续研究。 学习的技术以Web居多，前端有jQuery、BootStrap，后端有ThinkPHP，最近还有学Django。 还学了下微信公众号开发，如果有哪位朋友需要做公众号，可以找我喔。当然要看情况付费 学会了使用OS X。 差点忘了，还有学路由器刷Rom，目前用的Padavan固件挺不错的。（极路由3，Linux路由器） 做过的项目还有许许多多的失败作品，就不提出来鞭尸了。 做过的项目主要有： Python DNF_EX_Hs（地下城与勇士素材提取工具，支持IMG Ver1-6） DNF_Downloader（地下城与勇士外服资源下载工具） WifiData（工作项目，主要内容为数据处理） Buriko-Tools（BGI引擎资源封包，脚本解析工具） TiebaSpider（百度贴吧发贴记录爬虫） PHP TravelCloud（工作项目，旅游信息管理系统+公众号） WaterManager（工作项目，送水信息管理系统+公众号） WorkManager（工作信息发布系统） C++ OjoHook（ApiHook框架，基于MHook，用于游戏汉化） 养成的一些习惯在友人Musoucrow的指引下，获益匪浅，感激不尽，比如： 去看各种技术的官方文档少走不少弯路，以前只会百度。 使用coding/github存放项目怕是哪一天硬盘坏了，什么都没了。 使用git管理项目超方便，修改了哪个文件都能直观的看到。 用MarkDown编写文档 用Hexo做了这个blog 还有很多很多…不过我记性不好，忘了 其它今年的内容太多太多，还记得的差不多就这样子了，我 十 分 健忘。 整了台MacBook Air这个必须一提，当时我的想法是买一台高配置的Windows笔记本（游戏本）的。 但是但是，当时友人Musoucrow建议我买Mac，事实证明这是一个正确的选择。 OS X下的软件生态相当的好，如果是搞开发用的话，绝对比用Windows要好个百倍。 各种手势操作使我上瘾，三指多语言翻译十分好用，还有文本语音（粤语）阅读，总之细节很完善。 但如果真的要买Windows本来搞开发的话，我觉得必须得装个Ubuntu双系统，毕竟Windows十分的不好用。 总结今年真的是充实的一年，尽管我天天觉得很空虚，我现在看着就觉得很充实。 永别，2017，你好，2018。","link":"/2017/12/31/My2017/"},{"title":"窝逝去的2018","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言又一年过去了，总结一下今年的经历，迎接新的一年。 学业由中专升上大专，也算是人生的一段小高潮了。（从此沦为咸鱼） 先来说说中职的菜鸡经历： 2018年广东省\b中职技能大赛网络空间安全赛项一等奖。 2018年全国中职技能大赛网络搭建及应用赛项一等奖。 \b再来说说到高职的超级菜鸡经历： 2018年计算机学会算法大赛优秀奖。（好菜鸡呀，校内比赛三等奖都没） 2018年南山区职业技能竞赛网络安全项目三等奖。（\b三等奖垫底，大学大佬太多了） 总的来说，从中职升上高职，落差有点大。（虽然早已预料到了） \b技术今年软件开发的技巧没啥长进，似乎到达了瓶颈。 比起去年，只是更熟练的使用一些框架，以及稍微懂了一些简单的算法。还学了下设计模式（没有做过实际project，一下就忘光了）。 网络安全方面有所长进，学会了一些基本的渗透方法。 运维方面由于使用场景越来越少，变得生疏了。（毕竟运维是靠经验吃饭的） 高职做的一些有趣项目这些Project一般都是用来规避作业用的，都是些没什么用的\b爬虫。 OpenLabAutoMata（作业平台自动完成用的爬虫） SafeTeachSkiper（安全教育平台爬虫） 杂谈来到了深圳，感觉吃饭特花钱。 \b每天上学感觉也没学到什么，还不如以前中职自由地研究学到的多。而且每天上课都占据了大部分时间。基础课程完全跟不上，专业课程居于榜首，这种状态令人扭曲。 因为上课/各种琐事，导致时间十分的碎片化，没办法集中精力干活。（经常会出现，一天下来\b什么都没做但又很忙，时间不知道哪里去了的情况） 最近\b又开始搞人工智能的比赛，\b学得迷迷糊糊的，\b希望能拿个奖。 Flag\b上一年立的一个flag，弄台高配置的本本，装个*nix系统，在年底的比赛\b无意中实现了。（小米pro gtx + hackintosh/win10双系统） 所以再立多几个flag\b 把现有的project收尾完后，弃用Easy Language，转qt/c++。 \b学会合理规划时间 明确接下来要学习的方向 总结总的来说，今年没什么重大突破，\b只是稍微开阔了一点视野。 而且感觉处境有点危险，感觉再不把握好就废了。","link":"/2018/12/31/My2018/"},{"title":"窝逝去的2019","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言又一年过去了，总结一下今年的经历，迎接新的一年。 学业大一已经过去了，大二也过去了一半，咸鱼的时间过得可真快。 之前一直在纠结的插本问题进入了半放弃状态，走投无路只能继续投入各项比赛。 今年（主要集中在上半年）拿到的奖项有： 2019年 蓝桥杯 Java软件开发 广东赛区 二等奖（3月） 2019年 团体程序设计天梯赛 广东省 团队二等奖（4月） 2019年 广东省高职技能大赛 人工智能技术创新应用赛项 一等奖（6月） 2019年 广东省计算机设计大赛 二等奖（10月） 这些奖项，仔细想想好像也没什么用，也许这就是虚度光阴的借口吧。 大作业在学习数据结构课程时，发现寻路算法什么的好像并没有想象中的难。 于是乎想起以前做游戏开发时所见到的AStar算法，并实现了出来。 QtAStar 似乎有点不值一提，不过随便了。 技术今年并没有掌握什么革命性的技术，还是在原地踏步。 因为某个契机，粗略地学习了Flask（Python Web框架）。 同时又因为某个契机，学会了装机、装黑苹果。（已成功安排5+台） 还因为某个契机，又当了一把运维。（OpenStack相关） 黑苹果的玩具说到黑苹果，算起来今年应该是入坑一年了。 但在使用黑苹果时，总会遇到那么几个不顺心的问题，比如说： 盒盖之后自动睡眠。（无法盒盖听歌、更新软件等） 低电量时强制关机。（容易造成文件丢失） 解屏幕锁时需要输入复杂的密码。（指纹解锁用不了） 为了解决以上两个问题，我专门做了以下两个玩具： SleeperX（解决睡眠、低电量关机等问题） UnlockerX（使用蓝牙近距离解锁） 当然，白苹果也可以正常使用。 加速博客在看到友人XuQing的文章时，受到了启发，使用此前学习的Flask实现了一个GitPage的镜像工具。 GitPagesMirror 使用这个工具搭配CDN在国内服务器部署，可实现博客秒开，摆脱GitPage在国内访问时龟速的问题。 杂谈不知道从什么时候开始，去了一趟KTV、网鱼等地方；感觉与印象中被妖魔化的场所不一样。出去唱歌还是挺有意思的。不过网吧的话，体验好像还不如用自个电脑打机，而且还很浪费钱。 Flag上一年立的flag，似乎大部分都没能实现，除了比赛拿了个省一（可是没有国赛，继续之）。 旧Project始终需要Easy Language维护。 规划时间使用Microsoft To Do解决。（但自制力很差） 仍旧找不到一个明确的学习方向。 现在学习方向仍在运维与开发之间摇摆不定，希望明年可以明确下来。 总结总的来说，今年也没什么重大突破。 可能已经废了。","link":"/2019/12/31/My2019/"},{"title":"关于Openstack Neutron Router无法使用的问题","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言因学习需要，配置openstack上的路由时发现，创建路由及其子接口后，子接口无法激活，经过一番研究，终于发现问题所在。 解决方法这估计是neutron的一个bug，创建router之后，没有指定availability_zones这个属性，即没有指定其可用区域，也就是哪个区域都不能用。 然而availability_zones这个属性是只读的，刚开始我还以为直接更新这个区域就可用了，后来发现并不只是这样的。 根据错误日志发现，发现还跟/etc/neutron/l3_agent.ini下的gateway_external_network_id参数有关，我随意设了一个值就可以了（字符串）。","link":"/2018/03/26/NeutronRouter/"},{"title":"关于Openstack NoVNC code 1006的问题","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言今天使用其他人的电脑，通过horizon（dashboard）连接实例时发生了以下错误。 Failed to connect to server (code: 1006) 搜索了很多相关问题，都没有找到解决方案。 后来误打误撞解决了，特以此文章记录。 解决方法由于是其他人的电脑，别人用的是360浏览器打开，360浏览器本身没有问题，支持chrome模式以及ie模式。 但他访问dashboard时使用的是ie模式，这就是问题了。 可能他ie的版本比较旧，不支持一些js特性，导致访问novnc的验证服务时，传递参数时把token丢了。 novnc handler exception the token ‘’ is invalid or has expired 据我猜测，有可能是其ie版本不支持websocket，所以导致无法正常连接。 当换成chrome模式时立马就正常了。","link":"/2018/04/28/NoVNC1006/"},{"title":"OpenstackNova创建实例编码报错","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言重新搭建了一遍openstack，创建虚拟机失败，提示错误： 1云主机 &quot;abc&quot; 执行所请求操作失败，云主机处于错误状态。: 请稍后再试 [错误: 'ascii' codec can't decode byte 0xe6 in position 96: ordinal not in range(128)]. 以前也遇到过这情况，由于解决方法过于简单，当时没做记录，于是又一次重复踩坑，所以这次要记录下来。 解决方法selinux的锅，关掉就好了。","link":"/2018/04/02/NovaEncoding/"},{"title":"Dnf资源文件格式-NPK篇","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言在数个月之前，完成了\bOjoDnfExtractor的开发，该软件用于提取Dnf的资源包文件。 在做Dnf这些资源包文件的解析过程中\b，我\b明白了文件结构该如何设计。（也尝试了去设计文件结构） \b经过多番观察、推测，成功解析了NPK以及IMG-Ver1、2、4、5、6的文件结构（支持读写）。 \b正文npk文件是dnf用于模拟文件目录结构所使用的，结构相对简单。 为了直观的展示其结构，直接插图。 Color Name Type Remark \b红色 magic char[16] 文件标识 \b橙色 count int 文件数量 \b黄色 offset int 文件偏移 \b绿色 size int 文件尺寸 \b青色 name char[256] 文件名，加密过 蓝色 hash byte[32] 文件头哈希值（sha256） 1234# magic值FILE_MAGIC = 'NeoplePack_Bill'# 文件名\b加解密密钥C_DECORD_FLAG = bytes('puchikon@neople dungeon and fighter %s\\x00' % ('DNF' * 73), encoding='ascii') 由此可见，npk首先是由头部的magic进行验证是否为npk文件。 然后通过count取得文件数量，循环加载\boffset、size、name这些信息（三位一体）。 文件名加解密：使用密钥对文件名数据每一位进行位异或运算。（euc-kr编码） 加载完成后，通过hash\b可以对文件头部进行验证（毕竟都是关键信息）。 hash计算：取文件头数据左边，长度为整除17位再乘17位的部分，进行\bsha256运算。 1hashlib.sha256(head_data[:len(head_data) // 17 * 17]).digest() 一般读取完成头部信息+hash值之后，当前位置就是文件数据了（file[0][‘offset’]），如前面的图所示，后面就是IMG文件的magic了。 当得到这些信息之后，即\b可通过offset以及size读取对应img/ogg文件了。 结语有以上的信息，要实现npk的读写，已经是轻而易举了。 原来是打算一次写完的，不过当我写完NPK篇就已经花了不少时间，所以有空再更新IMG篇。","link":"/2018/06/19/NpkFileFormat/"},{"title":"Openstack安装（mitaka），RDO方式","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言每次安装openstack，都是一个重复踩坑的过程，虽然越踩就越深刻，不过还是记录下文档吧。 环境 系统：CentOS 7 网卡：enp7s0，enp8s0 SELinux: permissive/disabled（重要） 安装packstack首先根据我之前文章的方法进行配置，使用CentOS7.2（1511）版本的软件源，然后安装openstack源。 1yum -y install centos-release-openstack-mitaka 安装完源之后，根据配置vault软件源的方法，对openstack的源进行修改（因为\beol了），配置好之后开始\b安装packstack。 1yum -y install openstack-packstack 安装\b配置openstack主要就是\b修改配置文件，当然，不修改也行，默认是all in one模式安装，密码随机生成。 生成安装配置文件该文件包含了数据库的密码，ip，以及openstack各组件的参数，所有设置都在这个文件修改。 12# 文件名（answer.conf），可自行定义，配置完后建议保留备份。packstack --gen-answer-file=answer.conf 配置网络默认配置好像是为vxlan模式，具体作用我并不了解，所以先把我知道的写下来。 生成配置时，默认使用网卡一的ip（DEFROUTE？）作为管理ip，如果是dhcp获取的，在安装前注意替换成静态ip（or 主机名？）。 注意，安装需要连接网络，替换静态ip若无法联网，则无法安装。 \b如果只有两块网卡，可以在管理网卡，通过配置网卡别名方式联网。（配置多个ip） 如果有三块网卡，那更好办了，直接使用网卡三来联网。 vlan模式网卡一（enp7s0）用作管理网络，网卡二（enp8s0）用作数据网络（在vlan模式，可以通过trunk方式转发到交换机）。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# ...无关内容...# Comma-separated list of network-type driver entry points to be# loaded from the neutron.ml2.type_drivers namespace. ['local',# 'flat', 'vlan', 'gre', 'vxlan']CONFIG_NEUTRON_ML2_TYPE_DRIVERS=vlan# Comma-separated, ordered list of network types to allocate as# tenant networks. The 'local' value is only useful for single-box# testing and provides no connectivity between hosts. ['local',# 'vlan', 'gre', 'vxlan']CONFIG_NEUTRON_ML2_TENANT_NETWORK_TYPES=vlan# Comma-separated ordered list of networking mechanism driver entry# points to be loaded from the neutron.ml2.mechanism_drivers# namespace. ['logger', 'test', 'linuxbridge', 'openvswitch',# 'hyperv', 'ncs', 'arista', 'cisco_nexus', 'mlnx', 'l2population',# 'sriovnicswitch']CONFIG_NEUTRON_ML2_MECHANISM_DRIVERS=openvswitch# Comma-separated list of physical_network names with which flat# networks can be created. Use * to allow flat networks with arbitrary# physical_network names.CONFIG_NEUTRON_ML2_FLAT_NETWORKS=*# Comma-separated list of &lt;physical_network&gt;:&lt;vlan_min&gt;:&lt;vlan_max&gt; or# &lt;physical_network&gt; specifying physical_network names usable for VLAN# provider and tenant networks, as well as ranges of VLAN tags on each# available for allocation to tenant networks.CONFIG_NEUTRON_ML2_VLAN_RANGES=default:10:1000# ...无关内容...# Comma-separated list of bridge mappings for the OpenStack# Networking Open vSwitch plugin. Each tuple in the list must be in# the format &lt;physical_network&gt;:&lt;ovs_bridge&gt;. Example: physnet1:br-# eth1,physnet2:br-eth2,physnet3:br-eth3CONFIG_NEUTRON_OVS_BRIDGE_MAPPINGS=default:br-ex# Comma-separated list of colon-separated Open vSwitch# &lt;bridge&gt;:&lt;interface&gt; pairs. The interface will be added to the# associated bridge. If you desire the bridge to be persistent a value# must be added to this directive, also# CONFIG_NEUTRON_OVS_BRIDGE_MAPPINGS must be set in order to create# the proper port. This can be achieved from the command line by# issuing the following command: packstack --allinone --os-neutron-# ovs-bridge-mappings=ext-net:br-ex --os-neutron-ovs-bridge-interfaces# =br-ex:eth0CONFIG_NEUTRON_OVS_BRIDGE_IFACES=br-ex:enp8s0 配置密码密码的配置相对简单，搜索_PW配置项，进行修改即可。 horizon（dashboard）的密码验证是调用keystone的，所以要修改管理页面的密码，直接修改keystone的密码即可。 安装依赖这些都是openstack未明确指出的依赖，不安装无法正常配置openstack。 1yum -y install mariadb-libs libvirt-client qemu-kvm 开始安装执行以下命令即可。 1packstack --answer-file=answer.conf 执行完之后，不报错的话，那就是安装完成了。 访问Dashboard你以为安装完成就结束了？\b不信你访问dashboard试试看。 访问不了对吧，是的没错，这也是openstack的坑。（起码我用rdo装mitaka是这样的） \b错误解决无法访问dashboard打开/etc/httpd/conf.d/15-horizon_vhost.conf，在VirtualHost容器内添加： 1WSGIApplicationGroup %{GLOBAL} 无法创建实例关闭selinux。（你一定没细心看本文。） 结语我使用过很多脚本安装过openstack，有openshit，onestack等等，还有devstack。 然而却没有任何一个能安装成功，正常使用的。 唯独\brdo的packstack成功了，在我看来，openstack的安装也是一大难题，坑点太多了，rdo真的是解决了一个大难题，虽然还有一点小坑就是了。 补充后来又遇到了一些问题，导致无法正常安装，解决方法如下。 ERROR : Error appeared during Puppet run: x.x.x.x_provision.pp在网上没有找到有关资料，经过一番研究，据我理解应该是openstack应用某些默认规则失败，比如网段冲突什么的。 解决方法简单粗暴，关闭这个provision的测试开关就好。（据猜测应该不影响使用） 1234567# Specify 'y' to provision for demo usage and testing. ['y', 'n']CONFIG_PROVISION_DEMO=n# Specify 'y' to configure the OpenStack Integration Test Suite# (tempest) for testing. The test suite requires OpenStack Networking# to be installed. ['y', 'n']CONFIG_PROVISION_TEMPEST=n","link":"/2018/04/02/OpenstackInstall/"},{"title":"Openstack安全组的那些事","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言当安装完openstack，配置好vlan模式后，你要从外部访问实例的时候，你会发现，无法连通，无论是tcp,udp还是icmp(ping)，都无法访问实例。 但是实例可以访问外部的服务器，即网络是可通信的，只是被限制了。 也许你第一时间想到的是openstack主机的防火墙，但是你关掉之后，依然还是不行。 经过一番研究，我发现是由于openstack安全组规则导致的，特此记录。 安全组概述据我所理解，安全组就是防火墙，也是由一条条出口入口规则来组成的。 默认允许所有出口流量（有状态的），只允许内部主动发起连接的入口流量。 默认规则如图： 如图所示，默认有两条出口规则，是允许访问所有ip的。 疑问但是呢，另外也有两条入口规则，令我费解，不知道有何用处。（估计是允许主动连接后的状态入口规则？） 允许外部访问一开始就以为，那两条入口规则就是允许外部连接的规则，把安全组导致无法访问内部的可能性排除在外，还以为是我没正确配置好neutron导致的问题，然而事实却相反，研究了数天的vlan模式配置，都没找到原因。 后来又抱着试一试的想法去试了一下安全组的规则，居然可以了，添加了三条规则，如图。 添加时，远程项注意选CIDR，这是允许指定ip段访问，选安全组的话，估计是用来让openstack里其它网络进行通信的。 结语好吧，是我大意了，想不到解决方法这么简单，果然还是要详细看说明，安全组的规则还是有点不理解。","link":"/2018/04/04/OpenstackSecurityGroup/"},{"title":"Openstack忘记密码","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言忘记密码了，怎么办？当然是重置啦。 如何重置？这就是本文要说的内容了。 由于我部署openstack时使用rdo，对手动安装不是很了解，所以才会产生了不会重置密码的问题。 如果我的方法有错，轻喷轻喷。 关于初始令牌（admin_token）在手动安装时，一开始是没有admin用户的，也没有用户验证一说。 Q：没有管理用户，那要怎么管理呢？ A：使用admin_token进行管理 这个token可以在以下两个地方找到： 1.packstack生成的answer.conf： 12# Token to use for the Identity service API.CONFIG_KEYSTONE_ADMIN_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 2.keystone配置文件（/etc/keystone/keystone.conf）： 12345678910111213[DEFAULT]## From keystone## A \"shared secret\" that can be used to bootstrap Keystone. This \"token\" does# not represent a user, and carries no explicit authorization. If set to# `None`, the value is ignored and the `admin_token` log in mechanism is# effectively disabled. To completely disable `admin_token` in production# (highly recommended), remove AdminTokenAuthMiddleware from your paste# application pipelines (for example, in keystone-paste.ini). (string value)#admin_token = &lt;None&gt;admin_token = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 使用token进行管理使用这个token只能对用户进行管理，所以你也可以用来创建新的用户。（不确定，不过不能做用户管理以外的操作） 创建一个文件定义环境变量（比如这里是hsojo_rc）： 123export OS_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxexport OS_URL=http://localhost:35357/v3export OS_IDENTITY_API_VERSION=3 执行这个文件（加载变量）。 1source hsojo_rc 加载之后即可对openstack的用户进行管理 12345678910111213141516[root@localhost ~]# openstack user list+----------------------------------+------------+| ID | Name |+----------------------------------+------------+| xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | admin || xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | ceilometer || xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | glance || xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | cinder || xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | gnocchi || xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | nova || xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | demo || xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | swift || xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | aodh || xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | neutron |+----------------------------------+------------+[root@localhost ~]# 最后执行命令重置密码： 1openstack user set --password 123456 admin 问题解决。","link":"/2018/04/21/OpenstackPassword/"},{"title":"PHP7 兼容旧 MySQL Api","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言这几天折腾网络安全的玩意，在搭建安全测试平台的过程中出现了点小问题。 安全测试平台使用的php版本是5.x，但我在服务器上安装的是7.x，7.x的php废除了对mysql的api，添加了一套新的api，mysqli。 虽然可以去安装php5.x来解决这个问题，不过常用的5.6好像也不支持了，那就不折腾了。 考虑到各种因素，于是乎用mysqli的api修改一下，做了个mysql的api兼容层。 代码仅实现了一些基础api。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;?phpif(!function_exists('mysql_connect')){ function mysql_get_connection($conn){ if (!empty($conn)) { return $conn; } global $g_conn; return $g_conn; } function mysql_connect($host,$user,$passwd){ global $g_conn; $g_conn = mysqli_connect($host,$user,$passwd); return $g_conn; } function mysql_select_db($dbname,$conn){ return mysqli_select_db($conn,$dbname); } function mysql_errno($conn=null){ $conn = mysql_get_connection($conn); return mysqli_errno($conn); } function mysql_error($conn=null){ $conn = mysql_get_connection($conn); return mysqli_error($conn); } function mysql_fetch_array($result){ return mysqli_fetch_array($result); } function mysql_fetch_assoc($result){ return mysqli_fetch_assoc($result); } function mysql_fetch_row($result){ return mysqli_fetch_row($result); } function mysql_insert_id($conn=null){ $conn = mysql_get_connection($conn); return mysqli_insert_id($conn=null); } function mysql_num_rows($result){ return mysqli_num_rows($result); } function mysql_query($sql,$conn=null){ $conn = mysql_get_connection($conn); return mysqli_query($conn,$sql); } function mysql_real_escape_string($data){ $conn = mysql_get_connection($conn); return mysqli_real_escape_string($conn,$data); } function mysql_get_server_info($conn=null){ $conn = mysql_get_connection($conn); return mysqli_get_server_info($conn=null); } function mysql_ping($conn=null){ $conn = mysql_get_connection($conn); return mysqli_ping($conn); }}","link":"/2018/12/01/PHP7MySQL/"},{"title":"关于PHP文件上传的问题","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言今天测试一个图片上传功能，发现了一个诡异的现象，PC端正常上传图片，手机端上传图片则提示没有添加图片，反复尝试，无果。 我以为是browser/thinkphp/thinkcmf的问题，结果找了相关的文章，无果。 解决方法当我重复尝试手机上传，无意中选择了其它图片时，成功了。 经过一番折腾，发现是图片大小的问题。 在php.ini修改如下内容即可。 1upload_max_filesize = 20M","link":"/2018/02/05/PHPUpload/"},{"title":"PHP中将Word文件转换为PDF","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言在上一篇水文中，我提到了需要实现“docx转pdf”； 经过一番折腾，最终得出了一个结论：PHP可真不愧是一两面撬刀的🔨。 在尝试了使用“phpoffice/phpword”+“dompdf/mpdf”等主流PDF转换库对docx进行转换后，最后得到的效果实在是不尽人意。（错位+乱码） 虽然在Windows平台可通过“.net COM组件”这种外挂方式实现转换，但这种方法不具备跨平台特性，不方便部署，同时也不方便在日后的项目复用。 最后得到的解决方案则是通过PHP调用Python unoconv工具调用LibreOffice实现。（究极套娃） 调用unoconv实现调用unoconv进行转换只需要简单两行代码。 123456789101112/** * @param string $unoconv unoconv执行文件位置 * @param string $uno_path LibreOffice执行文件所在目录 * @param string $src 待转换的源文件路径 * @param string|null $dest 转换文件的路径 * @param string $format 转换的文件格式，需要LibreOffice支持 */function unoconv($unoconv, $uno_path, $src, $dest = null, $format = 'pdf'){ putenv('UNO_PATH=' . $uno_path); shell_exec(sprintf('%s -f %s \"%s\" %s', $unoconv, $format, $src, empty($dest) ? '' : '-o ' . $dest));} 以下是通过“phpoffice/phpword”实现数据注入模版并转换为pdf的业务代码。（截选部分） 1234567891011121314151617181920header('Content-Type: application/pdf');header(sprintf('Content-Disposition: attachment;filename=\"%s\"', $cert_name));header('Cache-Control: max-age=0');$cert_path = WEB_ROOT . 'upload/' . $cert_path;$template = new TemplateProcessor($cert_path);$template-&gt;setValues($data);$src = $template-&gt;save();$ext = @pathinfo($src)['extension'];if (!empty($ext)) $dest = str_replace('.' . $ext, '.pdf', $src);else $dest = $src . '.pdf';unoconv($setting['unoconv'], $setting['uno_path'], $src, $dest);$io = fopen(\"php://output\", \"w\");fwrite($io, readfile($dest));fclose($io); 部署unoconv环境 安装最新版本LibreOffice 安装最新版本Python（3.+）。 使用pip安装unoconv。 1pip install unoconv 配置“UNO_PATH”环境变量 /Applications/LibreOffice.app/Contents/MacOS C:\\Program Files\\LibreOffice\\program 这时，一般情况下只要在终端输入unoconv，就可以看到相关帮助信息。 但注意，Windows除外，在Windows里，unoconv并不是以可执行文件的形式存在（因为没有后缀）。 那么，在Windows环境下，则需要输入python C:\\Users\\HsOjo\\AppData\\Local\\Programs\\Python\\Python37\\Scripts\\unoconv运行unoconv。 到这里，unoconv环境的部署就完成了。 PHP调用前注意在不同的运行环境下，情况可能有所不同。 通常情况下，PHP无法获取到完整的系统环境变量。（有些环境变量配置是仅限于Shell的） 对于前面方法中的“unoconv执行文件位置”参数，建议提供绝对路径。 后记发现PHP版unoconv。（dbq，是我🔨了） ThinkPHP5 实现123456789101112131415161718192021/** * @param string $unoconv unoconv执行文件位置 * @param string $uno_path LibreOffice执行文件所在目录 * @param string $src 待转换的源文件路径 * @param string|null $dest 转换文件的路径 * @param string $format 转换的文件格式，需要LibreOffice支持 * @param int $timeout 超时时间 */function unoconv($unoconv, $uno_path, $src, $dest = null, $format = 'pdf', $timeout = 10){ $builder = new \\think\\process\\Builder(); $builder-&gt;setEnv('UNO_PATH', $uno_path); $builder-&gt;setTimeout($timeout); $args = [$unoconv, '-f', $format, $src]; if (!empty($dest)) { array_push($args, '-o'); array_push($args, $dest); } $builder-&gt;setArguments($args); $builder-&gt;getProcess()-&gt;run();}","link":"/2020/06/02/PHPWordToPdf/"},{"title":"Mac环境下配置XDebug","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言近日接了个CURD项目，在实现docx转pdf时出了点小问题，需要使用XDebug进行调试。 在一般情况下，只要使用包管理工具安装“php-ext-xdebug”之类的包即可。 然而Mac下的包管理，使用Homebrew搜索“php”，却没有相关结果。 经过一番搜索，发现pecl可安装“xdebug”。 配置环境变量在使用pecl前，需要先配置环境变量。（在使用brew安装php时有相关提示，如果已配置可忽略该步骤。） 12echo 'export PATH=\"/usr/local/opt/php@7.2/bin:$PATH\"' &gt;&gt; ~/.bash_profileecho 'export PATH=\"/usr/local/opt/php@7.2/sbin:$PATH\"' &gt;&gt; ~/.bash_profile 注意，这里我使用的是brew提供的php7.2版本。 安装XDebug最新版本的XDebug源码可以在pecl的网站中找到。（目前是2.9.6） 将文件下载下来，然后在终端执行以下命令。 1pecl install xdebug-2.9.6.tgz 这时安装已经完成，但需要修改一下配置文件。 1vi /usr/local/etc/php/7.2/php.ini 刚打开配置文件就见到了诡异的情况，第一行是加载扩展的配置。 123456789zend_extension=\"xdebug.so\"[PHP];;;;;;;;;;;;;;;;;;;; About php.ini ;;;;;;;;;;;;;;;;;;;;; PHP's initialization file, generally called php.ini, is responsible for; configuring many of the aspects of PHP's behavior.... 首先将这行配置删除，然后到文件尾部添加以下内容。 12345[xdebug]zend_extension=\"xdebug.so\"xdebug.remote_enable = Onxdebug.remote_port = 9000xdebug.remote_host = \"localhost\" 保存并重启“httpd”。（如果你使用的是Apache） 1brew services restart httpd 到这里，XDebug的安装配置便完成了。 断点调试（PhpStorm）首先找到“Preferences”-“Languages &amp; Frameworks”-“PHP”-“Servers”，添加当前开发环境所使用的服务器，保存。 然后点击“Run”-“Edit Configurations”菜单，在新窗口点击左上角“+”，添加“PHP Web Page”项；再在右边选中之前添加的服务器，以及配置好所使用的浏览器；最后确定保存即可。 在代码区打上断点，然后点击PhpStorm右上角的“Start Listening for PHP Debug Connections”（电话图标）；再点击右上角的“Debug”图标即可。 接口调试如果你需要使用Postman之类的接口测试工具，流程同上，首先点击“Debug”图标；然后在打开的浏览器地址栏中可见到“?XDEBUG_SESSION_START=23333”的字样。 这时只需要将这个“23333”复制，然后在接口测试工具中添加Header项 Cookie: XDEBUG_SESSION=23333，便可以正常调试了。","link":"/2020/06/01/PHPXDebugOnMac/"},{"title":"揭秘开车技巧-幻影坦克","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言前段时间在QQ上发现了一种特殊的图片，表面上看是一张正常的图片，而当你点开来看，emmmmm，撞车了。 在我看来，这很有趣，于是乎我搜索了一下，得知这种图片的称呼是“幻影坦克”（出自红警，虽然我没玩过），真霸气。 工具下载当我按教程做了一遍后，感觉每次要弄一张幻影坦克都好麻烦，于是乎我写了个幻影坦克生成工具。 如果有兴趣看制作方法的，\b可以往下看，如果只是想弄张图片，那就点击下面的链接下载即可。 点此下载 效果图随便找了个黄油的立绘做演示。 制作方法详情请参考我之前看的教程（点击打开），以下为我总结出来的方法。 首先准备一张底图，再准备一张面图。 底图和面图做去色处理（灰度），然后面图反色处理。 新建一个2*2的纹理用作填充背景。（白，黑，黑，黑） 新建一个能同时装下底图及面图的画布，然后用之前创建的纹理填充。（这时全是黑白颗粒，瞎眼） 选取所有黑色部分或白色部分，对其进行分离，得到白点图层及黑点图层。 使用之前反色的面图（取得明亮部分）作为黑点图层的蒙版。（越亮的部分，透明度越高） 使用底图（取得偏暗部分）作为白点涂层的蒙版。（越暗的部分，透明度越高） 拼合黑点图层及白点图层，删（隐藏）掉其它图层，保存，大功告成。","link":"/2018/02/08/PhantomTank/"},{"title":"Nis用户验证环境搭建（CentOS）","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言在linux环境下，若要实现一个用户在\b多台主机上登录，需要\b怎么操作呢。 使用ldap？不，这过于复杂了，要实现轻量的用户验证\b环境，只需要配置nis+nfs即可\b。 nis服务可以集中式管理账户（用户、组、hosts、等等。。），\b配置过程相对简单。 环境 \bServer \bip: 172.16.70.129 \b安装软件: ypserv（nis服务）, nfs-utils（nfs服务） Client ip: 172.16.70.130 安装软件: ypbind（nis客户端）, nfs-utils-lib（nfs挂载支持）, setuptool（自动配置工具） \bnis服务端配置配置允许访问的网段。 1234567891011[root@localhost ~]# vi /etc/ypserv.conf 41 # If you comment out the next rule, ypserv and rpc.ypxfrd will 42 # look for YP_SECURE and YP_AUTHDES in the maps. This will make 43 # the security check a little bit slower, but you only have to 44 # change the keys on the master server, not the configuration files 45 # on each NIS server. 46 # If you have maps with YP_SECURE or YP_AUTHDES, you should create 47 # a rule for them above, that's much faster. 48 # * : * : * : none 49 50 172.16.70.0/255.255.255.0 : * : * : none 配置nis域的域名。 1234[root@localhost ~]# vi /etc/sysconfig/network 1 NETWORKING=yes 2 HOSTNAME=localhost.localdomain 3 NISDOMAIN=test.com 建立用户，初始化数据库，环境配置。 1234567891011121314151617181920212223242526272829303132333435[root@localhost ~]# useradd user1[root@localhost ~]# useradd user2[root@localhost ~]# echo 123456|passwd --stdin user1更改用户 user1 的密码 。passwd： 所有的身份验证令牌已经成功更新。[root@localhost ~]# echo 123456|passwd --stdin user2更改用户 user2 的密码 。passwd： 所有的身份验证令牌已经成功更新。[root@localhost ~]# service rpcbind restart停止 rpcbind： [失败]正在启动 rpcbind： [确定][root@localhost ~]# service ypserv restart停止 YP 服务器的服务： [失败]设置 NIS 域名 test.com： [确定]启动 YP 服务器的服务： [确定][root@localhost ~]# /usr/lib64/yp/ypinit -mAt this point, we have to construct a list of the hosts which will run NISservers. localhost is in the list of NIS server hosts. Please continue to addthe names for the other hosts, one per line. When you are done with thelist, type a &lt;control D&gt;. next host to add: localhost next host to add: # 此处按下ctrl+d即可。The current list of NIS servers looks like this:localhostIs this correct? [y/n: y]We need a few minutes to build the databases...Building /var/yp/test.com/ypservers......localhost has been set up as a NIS master server.Now you can run ypinit -s localhost on all slave server. 到这里，nis服务就配置完成了。 nis客户端配置客户端的配置就相当简单了，使用setup工具即可。 123456789[root@localhost ~]# setup# 第一页确认即可。# 第二页选中nis项（\bUser Infomation，左侧），\bnext.# 第三页，填写域名及nis服务器ip，确认。# 配置完成后退出即可。（\b正常情况1-3秒即可配置完成）正在启动 rpcbind： [确定]启动 NIS 服务： [确定]绑定 NIS 服务：. [确定][root@localhost ~]# 到此，nis客户端配置完成。 nfs服务配置由于使用远程账户验证，那么客户端登录远程用户时，在本地没有对应的home目录。 以下为使用user1从\bClient登录的情况。 1234Ojo-Laptop:Blog hsojo$ ssh user1@172.16.70.130user1@172.16.70.130's password:Could not chdir to home directory /home/user1: No such file or directory-bash-4.1$ 可见user1已经可以在Client正常登录了，但是没有家目录，所以没法正常工作。 那么为了实现家目录能在Server与Client之间实时同步\b操作，可以使用nfs服务实现。 \b由于普通用户的\bhome目录处于/home位置下，所以\b只需要对/home配置nfs即可。 123456789101112[root@localhost ~]# vi /etc/exports 1 /home 172.16.70.0/255.255.255.0(rw)[root@localhost ~]# service nfs restart关闭 NFS 守护进程： [确定]关闭 NFS mountd： [确定]关闭 NFS 服务： [确定]Shutting down RPC idmapd: [确定]启动 NFS 服务： [确定]启动 NFS mountd： [确定]启动 NFS 守护进程： [确定]正在启动 RPC idmapd： [确定][root@localhost ~]# nfs客户端配置方法1: 直接把Server的/home，挂载到\bClient的/home。（不推荐，不过简单粗暴） 方法2: \b参考关于AutoFS的文档，实现自动按需挂载。 以下为配置完成，正常登录的结果（使用方法1，最快的方法）。 123456Ojo-Laptop:Blog hsojo$ ssh user1@172.16.70.130user1@172.16.70.130's password:Last login: Thu Jul 12 21:49:14 2018 from 172.16.70.1[user1@localhost ~]$ mount|grep home172.16.70.129:/home on /home type nfs (rw,vers=4,addr=172.16.70.129,clientaddr=172.16.70.130)[user1@localhost ~]$","link":"/2018/07/12/NisConfig/"},{"title":"Postfix配置（CentOS6.5）","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言现有需求要使用postfix服务配置一台邮箱服务器。（测试环境） 要求： 用户邮箱限额。 用户发件大小限额。 支持sasl验证。 支持收件。（使用dovecot） 配置过程首先配置软件安装源，这是必不可少的。 配置发件服务器在CentOS6.5的环境下，默认已经安装上了postfix服务，所以就不进行安装了。 配置postfix 由于postfix仅需要配置 /etc/postfix/main.cf，所以相对其他服务较为简单。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657[root@centos-linux ~]# vi /etc/postfix/main.cf# 设置域名 78 # The mydomain parameter specifies the local internet domain name. 79 # The default is to use $myhostname minus the first component. 80 # $mydomain is used as a default value for many other configuration 81 # parameters. 82 # 83 mydomain = test.com# 设置发件后缀 93 # 94 # For the sake of consistency between sender and recipient addresses, 95 # myorigin also specifies the default domain name that is appended 96 # to recipient addresses that have no @domain part. 97 # 98 #myorigin = $myhostname 99 myorigin = $mydomain# 监听所有端口 110 # 111 # Note: you need to stop/start Postfix when this parameter changes. 112 # 113 inet_interfaces = all 114 #inet_interfaces = $myhostname 115 #inet_interfaces = $myhostname, localhost 116 #inet_interfaces = localhost （注意屏蔽该行，作用：只监听回环端口）# 设置允许发件的域名 161 # 162 # See also below, section \"REJECTING MAIL FOR UNKNOWN LOCAL USERS\". 163 # 164 mydestination = $mydomain# 设置监听的端口 260 # You can also specify the absolute pathname of a pattern file instead 261 # of listing the patterns here. Specify type:table for table-based lookups 262 # (the value on the table right-hand side is not used). 263 # 264 mynetworks = 0.0.0.0/0# \b设置发件存储位置 412 # 413 # The home_mailbox parameter specifies the optional pathname of a 414 # mailbox file relative to a user's home directory. The default 415 # mailbox file is /var/spool/mail/user or /var/mail/user. Specify 416 # \"Maildir/\" for qmail-style delivery (the / is required). 417 # 418 #home_mailbox = Mailbox 419 home_mailbox = Maildir/# 邮箱（20MB）以及邮件（5MB）大小限制 678 message_size_limit = 5242880 679 mailbox_size_limit = 20971520# 配置sasl验证 680 smtpd_sasl_enable = yes sasl验证还要对saslauthd服务进行配置，默认情况下，sasl是不支持pam模式认证的。 123456789101112[root@centos-linux ~]# vi /etc/sysconfig/saslauthd 5 # Mechanism to use when checking passwords. Run \"saslauthd -v\" to get a list 6 # of which mechanism your installation was compiled with the ablity to use. 7 MECH=shadow# 配置完之后开启服务，并设置开机启动[root@centos-linux ~]# chkconfig saslauthd on[root@centos-linux ~]# service saslauthd start正在启动 saslauthd： [确定][root@centos-linux ~]# service saslauthd statussaslauthd (pid 1636) 正在运行... 配置收件服务器\b由于CentOS6.5的镜像软件源提供了dovecot，所以安装dovecot服务即可实现收件功能。 安装dovecot12345678[root@centos-linux ~]# yum -y install dovecot...忽略无用内容...Installed: dovecot.x86_64 1:2.0.9-7.el6Complete! 配置dovecot 开启对\b\b收件协议的支持（去掉注释符） 1234[root@centos-linux ~]# vi /etc/dovecot/dovecot.conf 19 # Protocols we want to be serving. 20 protocols = imap pop3 lmtp \b\b关闭ssl协议（测试环境就不管安全性啦） 12345678[root@centos-linux ~]# vi /etc/dovecot/conf.d/10-ssl.conf 1 ## 2 ## SSL settings 3 ## 4 5 # SSL/TLS support: yes, no, required. &lt;doc/wiki/SSL.txt&gt; 6 ssl = no 开启明文验证 1234567891011[root@centos-linux ~]# vi /etc/dovecot/conf.d/10-auth.conf 1 ## 2 ## Authentication processes 3 ## 4 5 # Disable LOGIN command and all other plaintext authentications unless 6 # SSL/TLS is used (LOGINDISABLED capability). Note that if the remote IP 7 # matches the local IP (ie. you're connecting from the same computer), the 8 # connection is considered secure and plaintext authentication is allowed. 9 disable_plaintext_auth = no 设置邮箱存放位置 由于24行的样本位置即是postfix的默认发件位置，所以解除该行屏蔽即可。 12345678910111213[root@centos-linux ~]# vi /etc/dovecot/conf.d/10-mail.conf 21 # 22 # See doc/wiki/Variables.txt for full list. Some examples: 23 # 24 mail_location = maildir:~/Maildir 25 # mail_location = mbox:~/mail:INBOX=/var/mail/%u 26 # mail_location = mbox:/var/mail/%d/%1n/%n:INDEX=/var/indexes/%d/%1n/%n 27 # 28 # &lt;doc/wiki/MailLocation.txt&gt; 29 # 30 #mail_location = 31 好了\b，做完以上操作后，基本上收件服务器的配置就完成了。 然后\b配置下开机启动，以及开启服务。 123456[root@centos-linux ~]# chkconfig dovecot on[root@centos-linux ~]# service dovecot start正在启动 Dovecot Imap： [确定][root@centos-linux ~]# service dovecot statusdovecot (pid 1556) 正在运行...[root@centos-linux ~]# 配置测试环境 首先\b当然是添加用户了。 12345678[root@centos-linux ~]# useradd mail1[root@centos-linux ~]# echo 321|passwd --stdin mail1更改用户 mail1 的密码 。passwd： 所有的身份验证令牌已经成功更新。[root@centos-linux ~]# useradd mail2[root@centos-linux ~]# echo 321|passwd --stdin mail2更改用户 mail2 的密码 。passwd： 所有的身份验证令牌已经成功更新。 由于是测试环境，也没有进行dns服务器的配置，所以使用hosts模拟域名解析。 12345[root@centos-linux ~]# vi /etc/hosts 1 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 2 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 3 10.211.55.4 test.com 正常情况下，到这一步已经全部配置好了，已经可以进行发件测试了。（注意关闭防火墙） 如图，发送成功，想必看到这套参数的人，都明白我做的是什么了，終わり。","link":"/2018/06/21/PostfixMailConfig/"},{"title":"Python闭包问题的探讨","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言今日在更新程序的时候遇到了个问题。 如何生成多语言的菜单，创建并绑定相应的回调函数？ 生成菜单自然是很简单的，一个for循环就好了，但是生成相应函数就？？？ 正文在解决以下事件的过程中，又思考得出了别的内容。 续：前言事件情况如下，现有语言列表及两个业务方法。 1234567891011# 现有两种语言，不排除以后会扩展#（即便只有两种语言也不写hardcode，便于日后扩展）languages = ['en', 'cn']def set_language(lang): # TODO: 这里是设置语言的业务代码 passdef add_menu(name, callback): # TODO: 这里是添加菜单的业务代码 pass 最初的想法如下（方法一）： 123for lang in languages: # 菜单回调函数包含一个参数，该参数用于获取触发的菜单。（但是没有用到这个参数，所以添加 _ 占位） add_menu(lang, callback=lambda _: set_language(lang)) 但是菜单无论如何点击，都会设置成 ‘cn’。（失败） 这是因为，创建回调函数（lambda表达式）时，以引用的方式将 lang 变量传入了函数；而 lang 变量是随着for循环改变的，而for循环最后一个值为 ‘cn’。（见languages list） 略加改进之后（方法二）： 12for lang in languages: add_menu(lang, callback=lambda _: (lambda x: set_language(x))(lang)) 本以为，将操作再作为函数封装起来，然后再将 lang 变量传入参数 x（参数变量是临时的）即可解决问题（规避引用）。但是，结果与前面相同。（失败） 正解操作： 12for lang in languages: add_menu(lang, callback=(lambda x: lambda _: set_language(x))(lang)) 来看看这个方法与前面两种方法的区别： 简单来说，方法一与方法二是一致的，想法都是创建一个带占位符（菜单参数）的回调函数，然后在回调函数里设置语言（for循环中的 lang 变量）。 而正解方法三的想法，则是创建一个生成回调函数的函数，然后将 lang 变量注入生成函数，最终返回设置各个语言的回调函数。（感觉有点反过来了） 由于定义了生成函数的函数，所以此处可对其进行复用。（减少创建次数） 123g_set_lang = lambda x: lambda _: set_language(x)for lang in languages: add_menu(lang, callback=g_set_lang(lang)) 至此，问题解决。 什么是闭包在前面的事件中，思考方法二的代码要如何修改时，请教了友人 Musoucrow，其提到了闭包这一知识点。（似乎前面根据参数生成函数这种操作就是闭包？？？） 经过一番查阅资料发现：闭包是由函数及其相关引用环境组合而成的实体；闭包就是指有权访问另一个函数作用域中的变量的函数。（？？？） 来看下面一个例子： 这是一个简单的求和函数。 1234567def sum(l: list): s = 0 for i in l: s += i return sprint(sum([1, 2, 3, 4, 5])) # &gt;&gt;&gt; 15 假如有以下要求：求和函数非立即运算，而是在后面再调用进行运算。 那么就需要将函数拆分成两部分：一是将被求和的变量初始化（生成环境），二是计算的过程。 如下代码所示： 12345678910111213def sum(l: list): def core(): s = 0 for i in l: s += i return s return coref = sum([1, 2, 3, 4, 5])g = sum([1, 2, 3])print(f()) # &gt;&gt;&gt; 15print(g()) # &gt;&gt;&gt; 6 此时，调用 sum 函数生成的函数 f 和 g 都引用了被求和的 list - 变量 l，且变量 l 在两个函数间相互独立。 也就是在生成函数时，同时创建了一套变量的环境。（可以理解成方法中的静态变量） 据我所理解，闭包就是一个可以根据参数生成的，独立环境（一个或多个静态变量）与函数的集合体。 修改“静态变量”这里是一个加法函数的生成函数，逻辑上看并没有什么问题。 123456789def plus(init): s = init def core(x): s += x return s return coref = plus(10)print(f(1)) 当运行时会提示： 1234Traceback (most recent call last): File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt; File &quot;&lt;input&gt;&quot;, line 4, in coreUnboundLocalError: local variable 's' referenced before assignment 这时，如果要修改“静态变量”（外函数的变量），需要使用 nonlocal 关键字。 12345678910111213141516171819def plus(init): s = init def core(x): nonlocal s s += x return s return coref = plus(10)print(f(1)) # &gt;&gt;&gt; 11print(f(2)) # &gt;&gt;&gt; 13print(f(3)) # &gt;&gt;&gt; 16g = plus(0)print(g(1)) # &gt;&gt;&gt; 1print(g(2)) # &gt;&gt;&gt; 3print(g(3)) # &gt;&gt;&gt; 6print(f(0), g(0)) # &gt;&gt;&gt; 16 6 由此可见，函数 f 与函数 g 之间，各拥有着一套独立的环境。 闭包与装饰器在查阅资料的过程中，见到一种说法：闭包用于实现装饰器。 猛然想起，python里面的语法糖，装饰器！ 计时器以下是一个业务函数，为了检测其运行时间，通常会这么做： 123456789from time import timedef xxx(): # TODO: 这里是业务代码 passt = time()xxx()print('time usage: %f' % (time() - t)) 装饰器，可用于对已有的函数进行包装，将某函数（如xxx）传入装饰器函数内，生成新的函数，并覆盖原函数。 具体看代码。 12345678910111213141516from time import timedef time_count(func): def core(*args, **kwargs): t = time() result = func(*args, **kwargs) print('%s time usage: %f' % (func.__name__, time() - t)) return result return core@time_countdef xxx(): # TODO: 这里是业务代码 passxxx() 常见的装饰器有如 @property、@staticmethod 等，其本质应该还是闭包（创建函数及其独立环境）。 带参装饰器函数是可以具备参数的，所以装饰器也是同样道理可以带参。 12345678910111213141516171819202122232425262728from time import timedef time_count(to_int=False): def time_count_core(func): def core(*args, **kwargs): t = time() result = func(*args, **kwargs) if to_int: print('%s time usage: %d' % (func.__name__, int(time() - t))) else: print('%s time usage: %f' % (func.__name__, time() - t)) return result return core return time_count_core# 此处须加上括号调用带参装饰器。@time_count()def xxx(): # TODO: 这里是业务代码 pass@time_count(True)def yyy(): # TODO: 这里是业务代码 passxxx()yyy() 带参装饰器，只需要在原有装饰器函数再进行一次套皮即可。","link":"/2019/07/31/PyClosePkg/"},{"title":"关于pyinstaller数据文件的打包","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言使用pyinstaller进行打包程序，执行程序时发现，放置于程序目录的文件无法加载（相对路径方式访问）。 经过一番测试，发现执行程序时，程序执行的当前目录不一定是程序文件所在的目录。 而使用--add-data与--add-binary打包的文件，发现存放于系统的临时目录。 获取路径经过一番搜索，终于找到了获取数据临时目录的方法。官方wiki 1234import sys# 临时目录的路径print(sys._MEIPASS) 这个临时目录，包含了运行所需的所有二进制文件，仅在程序运行时存在，当程序关闭就会自动清除。 由于运行时存在，可以直接被访问，所以请不要把一些安全性要求高的文件添加进去。 至于--add-data与--add-binary的区别，\b暂时还不清楚。","link":"/2018/03/18/PyInstallerData/"},{"title":"PyQt5 QWidget初始化问题","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言在初始化QWidget时出现了以下问题。 123456Traceback (most recent call last): File &quot;form/__init__.py&quot;, line 62, in __init__ self.setupUi(self) File &quot;view/form.py&quot;, line 31, in setupUi QtCore.QMetaObject.connectSlotsByName(Form)SystemError: &lt;built-in function connectSlotsByName&gt; returned a result with an error set 正文123456# view/form.py# 文件由 pyuic5 生成。class Ui_Form(object): def setupUi(self, Form): # 其它初始化代码 QtCore.QMetaObject.connectSlotsByName(Form) 123456789101112# form/__init__.pyfrom view.form import Ui_Formclass Form(Ui_Form, QWidget): def __init__(self, path: str = None): super().__init__() self.setupUi(self) self._path = path @property def path(self): return self._path 这段代码表面上没有问题，但在断点调试中发现，当调用Ui_Form - setupUi中的QtCore.QMetaObject.connectSlotsByName(Form)时，会访问self的所有属性（含property所装饰的方法）。 那么问题就很明显了，self.path属性对应的变量self._path未被初始化，被调用则会出错。 123456789101112# form/__init__.pyfrom view.form import Ui_Formclass Form(Ui_Form, QWidget): def __init__(self, path: str = None): super().__init__() self._path = path self.setupUi(self) @property def path(self): return self._path 问题解决。","link":"/2019/08/19/PyQt5QWidgetInit/"},{"title":"关于PyInstaller与PyQt5-5.11.2的问题","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言前段时间由于没有使用virtualenv进行模块测试，导致pip安装的模块乱七八糟。 于是乎使用pip卸载掉所有模块，重新把常用的装上。 今天出现了个问题，pyinstaller打包出来的pyqt5应用无法启动。 1ModuleNotFoundError: No module named 'PyQt5.sip' 解决方法经过一番搜索，发现是pyinstaller内置的sip版本与最新的pyqt5不兼容。 最简单的解决方法：安装旧版本。 1Ojo-Laptop:OjoDnfExtractor hsojo$ pip3 install pyqt5==5.10.1 或者是安装\b新版sip？不过我尝试了似乎不行。","link":"/2018/07/22/PyInstallerAboutQt/"},{"title":"Python on Windows爆炸","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言这几天做了一个基于python的project，使用pyinstaller进行打包。 在项目即将完成之际，经过三台PC的测试，并没有什么问题。 但是，当放到老板的两台PC上，均出现了无法运行的问题！ 于是乎，离deadline也就剩下两三天了，翻车翻车。 安全性这种虚拟机语言的安全性当然是妙不可言了，能直接反编译成源代码。 网上那些所谓的加密成pyc什么的，都是胡扯，完全没有意义。 什么？用pyinstaller做成exe？\b抱歉，那也没用，pyinstaller只是把py编译成pyc，然后打包放进exe壳里（如下，这些壳里面我估计嵌了个python虚拟机）。 123456789Ojo-Laptop:PyInstaller hsojo$ find bootloader -type f -name \"*.exe\"bootloader/Windows-32bit/run.exebootloader/Windows-32bit/runw_d.exebootloader/Windows-32bit/runw.exebootloader/Windows-32bit/run_d.exebootloader/Windows-64bit/run.exebootloader/Windows-64bit/runw_d.exebootloader/Windows-64bit/runw.exebootloader/Windows-64bit/run_d.exe 使用pyinstxtractor就能把pyc包分离出来，然后使用uncompyle（可使用pip安装），就能把pyc反编译回源码。 我尝试使用evb（The Enigma Protector），对Directory方式打包的exe进行打包，以为能防住pyinstxtractor了，但结果还是不行。 由于pyinstaller是把数据写在文件尾部的，但evb打包，只是在文件资源部分做手脚（估计在文件头部-中部），尾部的数据没有进行保护，所以还是轻易的被pyinstxtractor解包了。 而且修改了exe尾部数据的话，会导致pyinstaller生成的exe无法加载其打包的脚本，也就是使用pyinstaller的话，你就没有办法对脚本进行加密。 如果要进行加密，首先，得把pyinstaller的壳（exe）改造一下并重新编译，然后修改pyinstaller打包的实现部分。 当然，这样子只能防住解包工具（也许别人能\b通过ollydbg之类的工具，从内存里把你解密的pyc文件导出来）。 如果要真正意义上的加密，那应该就要修改python源代码了，当然这很不现实（修改之后，对现有模块的兼容性呢？），而且修改之后还要给pyinstaller重新做一套壳，这tm不就扯淡么。 而且我做的项目，一般都是小项目呀，哪受得了这样子大动干戈呀。 兼容性安全部分吹完了，轮到\b在\bWindows下的dog shit兼容性。 是的没错，就是说windows兼容性差，我在win7和win10的机器都测试过，pyinstaller+evb打包的程序能正常运行，当我放到老板机器上的win7和win10，就全部凉了，\b运行全部出错。 win7:直接崩溃，由于没开那个什么问题报告服务，所以具体哪个组件出问题也不清楚。（后来排查发现是evb导致崩溃的，使用pyinstaller自带的File方式打包是没问题的。） \bwin10:无法加载\bpyqt\b，始终找不到原因。 当然这里面包含的原因有很多，比如： 使用精简版系统，一些核心的dll被删掉了。 被xx安全软件\b杀掉了。 没有装vc2015运行库（pyinstaller的壳用这套环境）。 然而老板的机器上，vc2015已经安装了，安全软件也关了，剩下的只可能是其系统有问题了。 那怎么办，我也很无奈呀，老板机器的系统总不能给你重装了吧。 windows不像\blinux系统那样使用包管理来安装、管理系统组件，丢文件，安装失败残余文件，被误删文件，这种情况鲜有发生。 像是python这种胶水，依托着各种各样的组件，只要缺了一个文件，导致哪个模块无法运行，那么整个程序都无法运行，然后崩溃。 所以python程序不适合作为那种无法操作目标运行环境的客户端软件，客户的操作系统是千奇百怪的（Windows的锅），而且文件过于零碎，缺了哪些也不知道，也没法修复。 \b而且，用户不可能因为你做的一个小程序，然后去安装整套python环境，还要用pip去安装各种模块，而且最重要的是，一般用户只知道\b有图标就能点，甚至在压缩包内打开程序，其他东西一概不会。 \b总结python只适合做目标环境可控的软件，对于变幻莫测的客户端（仅限windows），是真的无能为力。 代码安全性堪忧，开发的软件一般只能自己用，发布出去=开源，当然如果你做的是开源软件的话，那就没关系啦。 当然，有这种安全性问题的并不只是python，什么java、c#之类的脚本语言，基本上都难逃反编译了。 所以如果要做闭源的商业软件，得上Qt/C++。","link":"/2018/06/19/PythonBoom/"},{"title":"Python操作文件时间","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言这次的项目涉及到了文件时间的伪装，即修改文件后恢复修改时间到原来得到的时间。 尝试使用某度搜索了相关文档，但却找不到相关的内容，google后立刻找到结果。 正文直接code说话。 1234567891011121314151617181920212223import shutilimport ospath = '文件位置'path_new = '文件位置2'# 取文件状态，包含各种时间。os.getstat(path)# 复制文件状态，在生成新文件时可使用该操作。shutil.copystat(path, path_new)# 取文件权限修改时间。os.path.getctime(path)# 取文件创建时间。a = os.path.getatime(path)# 取文件修改时间。m = os.path.getmtime(path)# 设置文件创建时间及修改时间os.utime(path, (a, m))","link":"/2018/06/14/PythonFileTime/"},{"title":"Python在CentOS下的编译安装过程","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言最近在编写CentOS环境下的自动部署脚本，开发环境使用Python3.7+在CentOS环境下需要自行安装。 在安装的过程中，把以前没记录下来的坑又踩了一遍，故以此记录。 下载源码点击打开Python官方源码下载页。 编译安装 安装编译环境 1yum -y install gcc make 安装依赖 123yum -y install zlib-devel# 以下可选，根据需要安装，不安装会导致某些库无法使用yum -y install bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel libffi-devel 编译安装 1234# --enable-shared用于导出动态连接库，不导出在特定情况下无法正常使用（如打包程序）./configure --enable-shared CFLAGS=-fPICmake -j8make install 将相关链接库与系统共享。 123echo /usr/local/lib &gt; /etc/ld.so.conf.d/python3.conf# 更新系统共享链接库ldconfig 到这里，安装就完成了。","link":"/2020/07/13/PythonMakeInstall/"},{"title":"关于Qt插件无法加载的问题","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言某友人做了个Qt/C++ Project，开发环境Qt4.8+VS2017。 开发环境运行程序正常，但发布版在实际环境中无法运行。 首先是Qt对VC2010的依赖，缺失msvc*xxx.dll。 运行库安装后，出现错误： 12CATCH: Driver not loaded Driver not loadedSQL_ERR: Database Open Fail 解决方法经过一番研究，发现是没有安装Qt环境的情况下，需要手动定义QT_PLUGIN_PATH。 首先把Qt下的plugins目录复制到程序目录，然后配置环境变量即可运行。 但是，让用户配置环境变量，显然是不现实的事情，所以得让程序实现。 又由于我又还不熟悉C++，尝试了各种操作都无法在程序中添加环境变量。 所以采用了了一个折中的方案，使用bat文件启动程序（配置环境变量）。 1234@echo offtaskkill /f /im BoringMachine_03.exeset QT_PLUGIN_PATH=pluginsstart BoringMachine_03.exe","link":"/2018/09/18/QtPluginError/"},{"title":"使用QuickLook进行快速预览","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言在macOS下有一个便捷的功能，其名为QuickLook。 只要在文件管理器选中一个文件，按下空格，即可快速预览。 最近重装了macOS，发现这个功能好像失效了。（可能是应用没有注册快速预览功能） 经过一番搜索，找到了更好的解决方案。（还找到了win版的QuickLook） Windows版QuickLook点击打开项目地址。 安装即可，文章后面内容对此不适用。 Mac QuickLook失效解决方案重新安装了系统，虽然应用没有注册QuickLook，但是可以直接使用插件进行预览。 点击打开项目地址，该项目集合了大部分开发者用的QuickLook插件。 或者到插件站下载。 安装方法mpkg直接安装即可，如果是qlgenerator类型，进行以下操作即可。 12mv xxx.qlgenerator ~/Library/QuickLook/qlmanage -r","link":"/2018/12/15/QuickLook/"},{"title":"关于Ubuntu下传感器导致屏幕反转的问题","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言今天给一台平板电脑安装了ubuntu系统，旋转了一番屏幕，发现屏幕在各个方向都按逆时针旋转了90度。 经过一番搜索，发现可以通过修改ACCEL_MOUNT_MATRIX来实现屏幕的翻转。 虽然最后依旧没能解决问题，但是估计关键点就在这了。 参考文档点击查看 点击查看 具体操作获取型号执行命令查看传感器设备信息，得到设备型号。 12# /dev/iio\\:deviceXX，XX要按实际情况修改。udevadm info /dev/iio\\:device0 之前执行的命令得到以下结果，经过与文档的对比，发现SMO8500为本机的重力传感器型号。 12345678910111213P: /devices/pci0000:00/INT3432:00/i2c-0/i2c-SMO8500:00/iio:device0N: iio:device0E: ACCEL_MOUNT_MATRIX=0, 1, -1; 1, 0, -1; 0, 0, -1E: DEVNAME=/dev/iio:device0E: DEVPATH=/devices/pci0000:00/INT3432:00/i2c-0/i2c-SMO8500:00/iio:device0E: DEVTYPE=iio_deviceE: IIO_SENSOR_PROXY_TYPE=iio-buffer-accelE: MAJOR=242E: MINOR=0E: SUBSYSTEM=iioE: SYSTEMD_WANTS=iio-sensor-proxy.serviceE: TAGS=:systemd:E: USEC_INITIALIZED=34719832 设置规则创建文件/etc/udev/hwdb.d/61-sensor-local.hwdb，写入自定义规则： 12sensor:modalias:acpi:SMO8500*:dmi:*:* ACCEL_MOUNT_MATRIX=0, 1, 0; 1, 0, 0; 0, 0, 1 执行以下命令更新硬件数据库： 123systemd-hwdb update# 更新后重启生效。reboot 结果最后横屏方向正常了，但是竖屏就无法显示了，经过n轮测试都无法解决问题，放弃了。","link":"/2018/05/27/RotationSensor/"},{"title":"关于Shell后台运行","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言在shell里执行程序时，在最后加上&amp;可以使程序在后台运行，不占用当前\b屏幕。 单独执行一条命令时，在最后加上&amp;即可。 但\b当\b我们想同时开启多个后台的时候，也许你的想法如此： 123for file in * ; do echo $file &amp;;done 如果是这样，恭喜你，想法跟我一样，是错的。 正解正确做法是，把每条命令都用花括号括起来，再在后面加上&amp;。（注意命令前面要加空格） 123for file in * ; do { echo $file; } &amp;done","link":"/2018/02/06/ShellBackRun/"},{"title":"【转】安装PyCrypto时VS编译出错","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言最近做了个project，需要用到PyCrypto。 PyCrypto在Windows下需要使用VC进行编译，不过Python模块在Windows平台编译坑点比较多。 如： 12345678910winrand.cD:\\Windows Kits\\10\\include\\10.0.17134.0\\ucrt\\inttypes.h(27): error C2061: 语法错误: 标识符“intmax_t”D:\\Windows Kits\\10\\include\\10.0.17134.0\\ucrt\\inttypes.h(28): error C2061: 语法错误: 标识符“rem”D:\\Windows Kits\\10\\include\\10.0.17134.0\\ucrt\\inttypes.h(28): error C2059: 语法错误:“;”D:\\Windows Kits\\10\\include\\10.0.17134.0\\ucrt\\inttypes.h(29): error C2059: 语法错误:“}”D:\\Windows Kits\\10\\include\\10.0.17134.0\\ucrt\\inttypes.h(31): error C2061: 语法错误: 标识符“imaxdiv_t”D:\\Windows Kits\\10\\include\\10.0.17134.0\\ucrt\\inttypes.h(31): error C2059: 语法错误:“;”D:\\Windows Kits\\10\\include\\10.0.17134.0\\ucrt\\inttypes.h(41): error C2143: 语法错误: 缺少“{”(在“__cdecl”的前面)D:\\Windows Kits\\10\\include\\10.0.17134.0\\ucrt\\inttypes.h(42): error C2146: 语法错误: 缺少“)”(在标识符“_Number”的前面)... blah blah blah ... 解决方案点击查看原文。 处理方式:修改文件 setup.py 12345678def detect_modules (self): # Read the config.h file (usually generated by autoconf) if self.compiler.compiler_type == 'msvc' and False: # Add special include directory for MSVC (because MSVC is special) self.compiler.include_dirs.insert(0, &quot;src/inc-msvc/&quot;) ac = self.__read_autoconf(&quot;src/config.h&quot;) else: ac = self.__read_autoconf(&quot;src/config.h&quot;) 在if self.compiler.compiler_type == 'msvc'后加上and False，使special失效。然后拷贝\\src\\inc-msvc\\config.h 到\\src\\config.h 编译即可。","link":"/2018/11/30/Trans-VSPyCrypto/"},{"title":"使用 ufw 抵御海外流量攻击","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言近日，检查阿里云服务器账单时，发现莫名其妙少了10块钱；仔细一看，费用都是由服务器流量产生的。 但在这段时间里，我几乎没怎么使用服务器进行大流量操作，相必是被 Hack 了。 抱着这样的想法，我开始检查服务器环境… 检查网络由于费用都是由服务器流量产生的，第一步自然是检查网络。 使用 nethogs 检查后发现，流量来自多个海外 IP，而且 IP 一直在改变；一直都在连接 RDP 协议的端口；同时还有一个固定不变的 IP ，随机连接服务器上的任意端口。 此时，可推测对方使用了代理 IP 池，尝试对远程桌面服务进行爆破；以及使用一台 IP 不变的设备对服务器进行全端口扫描。 排查问题本人平时也算是比较注重安全管理，基本上不会存在配置不当而导致被钻空子的情况。 不过由于服务器上也没有什么重要的东西，以防万一，便对服务器硬盘进行重置了。 重置之后，再使用 nethogs 检查流量，发现即使服务全部删除了，始终还是有IP在尝试连接 RDP 协议的端口。 此时，可以排除服务器被挂马、Hack或是中毒的情况；同时确定对方只是在尝试爆破。 应对思路要解决这种网络问题，只能上防火墙了。 大致思路：只要把所有攻击 IP 都添加到防火墙规则里拒绝掉，那么就无法产生新的流量攻击。 由于使用的是阿里云的服务器，对于固定 IP 的流量，可以使用安全组 Ban 掉。（彻底的） 而 IP 不固定，使用 IP 池进行操作的流量就没那么好处理了；因为安全组需要人工操作，不可能逐个IP进行屏蔽。（应该可调用阿里云 API，但复杂，不考虑） 虽然没办法使用安全组来屏蔽这些恶意 IP，但是 Ubuntu 系统下有 ufw 这个防火墙，使用简单，与程序交互也方便。 那么，只要写一个程序，从 nethogs 获取到可疑的IP，然后调用 ufw 添加拒绝该 IP 所有连接的规则，运行一段时间之后便无法产生新的攻击。 由于是私人服务器，只在国内使用；那么使用 GeoIP 对所连接的 IP 进行检测，除了 Country 为 CN 外的所有 IP 都 Ban 掉即可。 代码实现代码使用Python3实现，请到GitHub查看。 后话攻击的 IP，是真的多；跑了一天，添加了 1400+ 条规则。 再后来（01.22）听说，深 圳 网 安在那段时间里似乎有对阿里云的服务器在扫描。","link":"/2020/01/04/UfwProtect/"},{"title":"unoconv转换Csv中文乱码问题","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言最近在使用PHPSpreadsheet导出大量数据到Xlsx时，频繁出现各种问题；如内存溢出、数据丢失等。 后来更换导出格式为Csv，问题减少了，但是在Office中使用极其不友好；如不支持单元格格式、在不同系统中使用的编码不同可能会出现乱码的情况。 于是就有了这么一个折中的方案，PHP导出时使用Csv格式，导出完成后，使用unoconv将文件转换为Xlsx格式。 然而使用unoconv转换为Xlsx时，遇到了中文乱码的问题。 1unoconv -f xlsx -o xx.xlsx xx.csv 问题原因经过多番测试发现，无论Csv采用GBK编码或是UTF-8编码，都会出现这个问题；但是乱码的内容有所不同。 同时使用不同系统下的Office打开Xlsx，得到的结果一致；这时基本可以判断乱码是因为LibreOffice在读入Csv内容时使用了错误的编码。 解决方案查看unoconv的帮助后发现有这么一项参数可用于设置读入相关选项。 1-i, --import=string set import filter option string 那么再查看unoconv文档后发现“Filter_Options”的填写格式。 1unoconv -f xlsx -o xx.xlsx --import FilterOptions=44,34,76,1,,0,true,true xx.csv 至此，问题解决。","link":"/2020/06/23/UnoconvEncoding/"},{"title":"Python解析url请求参数","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言在制作爬虫模拟登陆时发现表单数据如下。 1userName=xxx&amp;userPwd=xxx 结构相当简单，想要转换成dict，分割两下就好了，但是仔细想想，这么常见的需求，一定会有相应的模块。 寻找了一番，果然是有的。 方法详细操作自行查看文档。 123from urllib.parse import parse_qsprint(parse_qs('userName=xxx&amp;userPwd=xxx'))","link":"/2019/03/17/UrlQueryParse/"},{"title":"重启Usb蓝牙设备（PD虚拟机模拟插拔）","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言小米pro的Hackintosh方案挺香的，用了也有8个月了，还是挺稳定的。 但是其中有两个很操蛋的问题： 内置蓝牙无法使用 无法驱动内置Wi-Fi 由于不想硬改，作出一些不可逆操作，所以以上问题均采用USB方案解决。 Wi-Fi解决方案也比较完美了，使用Comfast的CF-811AC可支持5G网络，搭配GitHub上的驱动使用，效果极佳。 蓝牙，当时随便在淘宝买了个比较mini的USB蓝牙（加搜黑苹果关键字），倒是能用，但睡眠唤醒（设备断电）之后（手动关闭亦是如此），会导致无法使用，但如果重新插拔就又能正常使用了。（可能是驱动问题） 所以为了让蓝牙正常的工作，而又不希望每次都进行物理插拔（一点都不geek），就诞生了现在的想法： 使用虚拟机模拟插拔！ 正文首先是会导致蓝牙翻车的情况有： 长时间的睡眠唤醒 手动关闭蓝牙（无法再打开） 睡眠唤醒的话，直接模拟插拔就OK。 而手动关闭蓝牙，会在重新插上的时候，系统会根据之前关闭的状态再一次把蓝牙设备关闭（关闭就翻车了），形成了死循环。 所以这时需要在系统里，将蓝牙开关打开； 可以使用blueutil（终端下的蓝牙工具）进行打开操作。（拒绝手动操作） 模拟插拔使用PD虚拟机，其SDK极其完善。（在.app/Contents/MacOS内的命令行工具） 代码shell脚本的语法十分诡异，查了好久才能写出个判断、循环语句。（？？？） 将以上所有内容结合，最后得出以下结果： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#!/bin/bash# 设置变量program=\"/Applications/Parallels Desktop.app/Contents/MacOS/prlctl\"vm=\"Windows 10\"device=\"CSR8510 A10\"vm_app=\"$HOME/Parallels/$vm.pvm/$vm.app\"# 重置蓝牙开关（后台运行以缩短时间）{ /usr/local/bin/blueutil -p 0 2&gt; /dev/null /usr/local/bin/blueutil -p 1 2&gt; /dev/null} &amp;# 等待PD启动start=falsewhile true; do status_content=$(\"$program\" status \"$vm\" 2&gt;&amp;1) if [[ \"$status_content\" =~ \"Unable to connect to Parallels Service\" ]]; then if [ !$start ]; then start=true open \"$vm_app\" fi echo \"Waiting PD Service Start...\" sleep 0.5 elif [[ \"$status_content\" =~ \"$vm\" ]]; then break fidone# 获取VM状态echo $status_contentstatus=$(echo \"$status_content\"|awk '{print $NF}')[ \"$status\" == \"suspended\" -o \"$status\" == \"stopped\" -o \"$status\" == \"paused\" ]need_resume=$?# 开启VMif [ $need_resume -eq 0 ]; then \"$program\" resume \"$vm\" 2&gt; /dev/nullfiwhile true; do status_content=$(\"$program\" status \"$vm\" 2&gt;&amp;1) if [[ \"$status_content\" =~ \"resuming\" ]]; then echo \"Waiting VM Resuming...\" sleep 0.5 elif [[ \"$status_content\" =~ \"running\" ]]; then break fidone# 模拟USB插拔\"$program\" set \"$vm\" --device-connect \"$device\"\"$program\" set \"$vm\" --device-disconnect \"$device\"# 根据操作前状态决定是否暂停VMif [ $need_resume -eq 0 ]; then \"$program\" pause \"$vm\"fi","link":"/2019/08/04/UsbBluetoothRestart/"},{"title":"华硕VC60踩坑记 - 垃圾佬的冒险经历","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言前段时间，家里的一台笔记本寿终正寝了，应是主板等部件损坏了。 由于这台机器的主板曾经续过一次命（换过）；那么这个主板想必是个坑大的家伙，就放弃了再换主板的想法。（修好了也容易再坏） 但是很多外设都还能正常使用，有如CPU（i3-2310m）、内存（DDR3 8G）、硬盘（固态128G）、网卡（intel 7620）；折合下来也值个几百块吧，为了不浪费这些闲置资源，我在某宝寻找了可匹配这些硬件的主板。 虽然有很多国产寨板，但唯一能吸引到我的只有华硕VC60这块板子 （华硕品质，坚如磐石）；于是乎就开始了垃圾佬的冒险。 坑点这玩意坑点很多，从头到尾坑了我将近100元的邮费。 最奇怪的是，卖这块板子的店家也不清楚这块板子的细节。 版型一开始我以为这是普通的ITX主板，直到我发现螺丝孔位和ITX机箱完全对不上。 但此时已经购入电源等外设了，退货还嫌麻烦 （邮费贵），只能将计划进行到底了，自制机箱预定。 电源这块板子电源使用DC供电 （那是啥？），一开始以为找个普通的ITX DC电源就可以了，结果卖电源的店家表示DC电源还区分多种不同电压，不是随便配个接口合适的就可以的；然而主板卖家表示也不清楚电源用的啥规格（WTF？？？）。 经过一番查阅资料，发现这板子原来是华硕在台湾地区做的一款类似HTPC机器（全称 VivoPC VC60）的拆机板。 查看使用手册后，终于找到了其电源规格： 12345電源變壓器資訊:• 輸入電壓:100-240Vac• 輸入頻率:50-60Hz• 輸出電流:3.42A (65W)• 輸出電壓功率:19V 于是上某宝，终于搞到电源；似乎就是个普通华硕笔记本的电源。 CPU这板子原生支持intel 3代 移动端CPU，但是2代CPU并不确定。 接上电源后，并不能亮机，我怀疑可能是 CPU 不兼容的问题，又或者是 CPU 是坏的（笔记本坏了才拆下来的）。 然后入了一块 i5-3340m，随后装上发现还是不亮机 （螺丝刀跳线短接大法也不行，割肉退货的心都有了）； 于是把全套东西寄给主板店家 Debug 了，然后对方跟我说跳线接错了。（？？？） 跳线跳线我是根据主板店家的商品详情里的跳线图来接的，按理说不可能会出错。（普通ITX跳线接法） 然后，主板店家竟然把我的跳线焊到主板上去了，WTF？？？然后焊的位置不是跳线图的位置，而是旁边的一个超小 6pin 插槽（而且市面上找不到相应规格的接线）；此时此刻，我感觉我受到了欺骗；这种非正常规格的板子，竟然连跳线都不给我配一根就拿出来卖？ 那行吧，能开机就好，累了。 散热器这板子也是够神奇，散热器也不是常规规格；其电源使用的是超小 4pin 插槽。无奈，只能定制。 由于之前买过散热风扇（8cm * 8cm，USB 供电），就直接拿来用了；散热片到淘宝刮了一片的铝制二极管散热片 （找来找去都没找到合适的，只能将就用这个了）。 有了材料，接下来还有一个难题，怎么给 CPU 导热；如果直接将散热片压在 CPU 上，我认为压坏芯片的概率很高。 经过一番思索，我得出了以下方案： 方向：从上到下 配件 规格 风扇 8cm * 8cm * 1.5cm 散热片 45mm * 60mm * 20mm 导热硅胶 30mm * 30mm * 1mm 铜片 20mm * 20mm * 2mm 硅脂 … CPU … 其中，散热片和 CPU 之间，增加一片导热硅胶作于缓冲（硅胶有弹性），由于 CPU 需要涂抹硅脂导热，所以在 CPU 上面增添了一块铜片。 固定也是一个问题，万幸 CPU 周围 4个 螺丝孔位都是 M2规格，从其他地方抠下来4颗就可以了，然后使用弹簧丝缠绕散热片，再通过螺丝固定到主板上就解决了。 同时风扇还有固定用的吸盘，装好机箱后，摇晃也不成问题。（也有缓冲作用，防止压坏CPU） 散热器部署完成后，长时间烤机可发挥 62%，1.3GHz 的性能；突发性能的话，还是能跑到 100% 的。（行吧，5v风扇也就这个水平了，当 Web 服务器肯定还是没问题的） 总比不加散热器时（闲置状态），只能发挥 14.3%，0.3GHz 的性能要好，拖动窗口都卡。 机箱此处该使用CAD定制机箱，手工定制真的是愚蠢；途中的艰辛真的是难以想象。 前文提到，这个板子无法使用常规 ITX机箱，于是只能定制机箱；依稀记得某同学说过：亚克力材质挺好；于是乎购入了几片亚克力板。 详情如下所示： 尺寸（mm） 颜色 厚度（mm） 数量 备注 200 * 200 黑色 4.5 2 机箱顶部及备用 200 * 300 黑色半透明 4.8 2 机箱侧面及备用 200 * 200 黑色 7.5 1 机箱底部 当亚克力板到手的时候，我发现其重量相当的大，与预想的不一样；但不过既然买了就不能浪费了 （退货得亏邮费，还麻烦）。 为了定制亚克力板，还专门购入了一把 USB 电钻。（威力很弱，但勉强能用） 第一步便是给底板打孔，经过多次失败后，7.5mm 的板子终于可以契合主板的孔位了。 但无奈 7.5 太重了，还好有一片 200 * 200 * 4.5 的备用板，重新搞了一张。（熟能生巧，一次搞定） 然后是将 200 * 300 切割为4面侧板，还是使用 USB 电钻；由于威力极弱，经过了半天时间，终于切割完成。 使用亚克力胶水粘合后，效果也可还行。（可惜手误将胶水粘到了机箱表面，把板子弄花了） 机箱分为两个部分，一部分是底板+背板，另一部分是顶板+三个侧板，其中背板需要针对主板接口进行开孔，而顶板则需要为风扇抽风位、电源按钮进行开孔。 又是经过一番漫长的切割、开孔，机箱雏形做好了；但此时无法固定，无奈先用透明胶粘好。 为了方便拆卸，后来购入6#32螺母配合6#32 UNC指旋螺丝对机箱四角进行固定；其中螺母使用之前 7.5mm 厚度的废板切角，通过使用胶水固定在机箱上半部分的底部四角，同时对底板进行开孔，使螺丝可接触到螺母；然后即可完成机箱的固定。 结论虽然坑点很多，但是 BIOS 却意外的设计的挺好；可以关闭错误提示（如没有安装 CPU 风扇）。 版型 非ITX，定制板 CPU 支持2代CPU 跳线 定制，需要店家焊接 散热器 只能定制 机箱 只能定制 这个 ** 东西竟然被我搞好了，感觉组普通规格的台式机，应该都不是问题了。 以后还当不当垃圾佬？实话说，真的有点怕了；但我就是喜欢折腾。 成品如下所示。 后话还别说，弄好之后挺香的；有空再整个黑苹果，感觉不错。 添加风扇开关在安静的环境下开着这台机器，风扇会产生一定的噪音；如果要关掉风扇则要拔掉风扇的电源，但插拔USB线挺不方便的。 于是乎，经过思考，得出了以下方案。 使用自锁式开关控制USB电源。 比起插拔，还是按按钮舒服。 散热升级使用一段时间后发现，导热硅胶散热效果太差，开机一段时间之后连基本操作都卡，由于主板上仍存在三个螺丝孔位空着。 于是乎，我又简单思考了下升级方案。 升级以后，效果还不错，终于算是能正常使用了。 Q/A这里是答疑区，有问题可在博客下进行评论；不定时回复。 如何短接开机经测试，用螺丝刀短接 pin2 &amp; pin3 即可。 是否支持超频不支持。","link":"/2020/03/21/VC60Adventure/"},{"title":"关于虚拟机在各VM平台间相互迁移的问题","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言今天在\b将vmware虚拟机迁移到kvm平台时，发现了一些问题。 我使用qemu-img转换虚拟磁盘格式vmdk\b-&gt;qcow\b，CentOS6.8的虚拟机可以正常使用，而Win2003发生了error loading operating system的错误。 我尝试使用virtualbox打开转换后的Win2003虚拟机，结果发生了与kvm一样的错误。 我尝试直接用virtualbox通过vmdk原虚拟磁盘启动，也是发生了\b同样的错误。 通过搜索发现，这通常是引导损坏导致的，但是我通过重建mbr，重建系统引导的常规方法均无法修复。感觉事情并不简单 经过一番思考，vmdk和qcow格式发生了一样的错误，Linux的虚拟机能正常启动，\b这说明了转换是没有问题的，问题是vmware的windows虚拟机放在vbox/kvm下不能成功引导。 解决方法\b思考了很久还是无果，误打误撞的发现了解决的方法。mmp，解决了问题却不知道\b什么原因，很痛苦。 创建一块相同大小的虚拟磁盘（大小无所谓，装得下内容就行） 使用Ghost将原磁盘数据克隆到新磁盘（disk to disk） 虽然解决了无法引导的问题，但并没完全解决Win2003虚拟机迁移的问题。 Win2003虚拟机如果直接迁移到kvm的话，会发生蓝屏现象，无限重启。 这好像是由于Windows不能更换ide控制器（我没深入了解），vbox可以通过添加使用SCSI控制器跳过这个问题，如果使用ide控制器会发生这个问题。 但我要迁移到的kvm平台只支持ide（定制过的，垃圾），那只能想办法解决了，经过一番搜索，发现vbox给出了\b解决方法 - Hard Disk Support。 下载MergeIDE.zip 在虚拟机内把全部内容解压到一个目录 执行MergeIDE.bat 可以使用vbox通过SCSI控制器启动，然后执行，或者用vmware执行后再重新转换vmdk-&gt;qcow。 最后把\bqcow导入到kvm平台就好了。 后记虽然总体来说，完全就是围绕着Win2003来说的，不过我认为方法是通用的，如果以后迁移虚拟机后引导失败，就考虑一下这方法吧。","link":"/2018/01/05/VMConvert/"},{"title":"Vim Adventures","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言在知乎看到了关于vim学习的文章。 想着vim在字符界面下使用很方便，使ssh环境下修改文件不再困难。 由于没有系统的学习过，突然又萌生了重头开始学习的念头。 当我打开以下链接后就停不下来了。（是个游戏，操作方式=vim使用方式） 点击查看 Level 1才知道vim在普通模式下\b是用这些按键移动的。（平时只用上下左右光标） 中途有个宝箱，不过现在开不了（还没取得按键）。 \b按键 操作 k 向上移动 j 向下移动 h 向左移动 l 向右移动 Level 2\b基本操作。（以下分段可以为一个单词、一个标点） \b按键 操作 w 到达下个分段的\b开头 e 到达当前\b（下个）分段的尾部 b 到达上个分段的\b开头 Level 3首先取得按键B。（用于打开Level 1的宝箱，现在锁住的，先通过Level 3） 到右下角使用w+e到达底部取得按键x，删除红色圈的字符。（30秒结束后自动归位） \b按键 操作 B 到达上个单词的开头 x 删除字符 得到最后的钥匙，返回Level 1打不开的宝箱，按B切入。 \b结果当我打开\b\b最后的宝箱后震惊了，要继续就要充钱了，成功打消了我继续学习vim的念头。 没钱。没钱。滚蛋。","link":"/2018/06/20/VimAdventures/"},{"title":"Vnc+Xfce环境下使用Fcitx输入法","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言在Ubuntu下实现远程控制，一般的解决方案为安装xfce桌面环境及vncserver。（自带的vino必须要登录后才能连接，不方便在服务器环境使用） 一般linux比较好用的输入法如sogou，其基于fcitx输入法环境。 但xfce环境并不包含fcitx输入法环境的配置及运行，也就是通过vnc连接时xfce桌面无法使用fcitx输入法。 正文通常我们使用vnc+xfce时，vnc的启动脚本（~/.vnc/xstartup）内容为： 123456789101112#!/bin/sh# Uncomment the following two lines for normal desktop:# unset SESSION_MANAGER# exec /etc/X11/xinit/xinitrcunset SESSION_MANAGERunset DBUS_SESSION_BUS_ADDRESS[ -x /etc/vnc/xstartup ] &amp;&amp; exec /etc/vnc/xstartup[ -r $HOME/.Xresources ] &amp;&amp; xrdb $HOME/.Xresourcesvncconfig -iconic &amp;xfce4-session &amp; 如果我们需要使用fcitx输入环境，只需要在最后添加以下内容即可。 12345export GTK_IM_MODULE=\"fcitx\"export QT_IM_MODULE=\"fcitx\"export XMODIFIERS=\"@im=fcitx\"fcitx-autostart &amp;","link":"/2019/06/16/VncXfceFcitx/"},{"title":"Web开发基础课程","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言前段时间为完成学校任务，设计了一套Web开发课程。 课程涉及前后端的基础应用，最终目标为开发一款简易的博客程序。 博客程序包含最基本的功能（用户、发布文章、文章分类、文章留言、友情链接）。 课程安排学习周期：2周（原定1周，翻车了） 课程内容如下所示，都是些最基本的知识点。 软件环境 系统：Windows 7 PhpStudy2016（apache+php5.6+mysql，php集成环境） VC2012_x86（php5.6运行库） Chrome（浏览器，前端调试工具） PhpStorm（ide，集成开发环境） Navicat（数据库管理工具） 前端资料 html css js jquery bootstrap 页面设计前端页面设计可参考BootStrap官方提供的几个样例。 点击查看 以下为博客程序所需设计的页面。 后端资料 php mysql mvc设计思想 thinkphp 模型设计（数据库/对象格式）以下为模型设计图。 课程完成作品参考 SimpleBlog 使用方法： 下载ThinkPhp5完整源代码并解压，将SimpleBlog的文件覆盖ThinkPhp5框架。 使用PhpStudy导入 blog 数据库（blog.sql），使用默认数据库账号。（root root）","link":"/2019/07/30/WebBaseCourse/"},{"title":"【湿货】Web应用渗透实验","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言最近为完成作业，以及复习web安全知识，做了个简单关于web应用的渗透测试教程。 使用PentesterLab进行演示，有兴趣的可以看看。 PS：非常简单的小白向，但常见的案例都有。 正文作业为ppt格式，为方便网页查看，将其转换成了pdf。(但是有些图片被遮罩了) 点击查看pdf 点击下载ppt","link":"/2019/06/16/WebSafeTest/"},{"title":"微信公众号简易入门教程","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言在我学习公众号开发，也有一段时间了，其中也做过两个公众号项目，最近有友人向我请教公众号该如何学习，特以此篇文章总结一下，同时也巩固一下我的知识（套路）。 准备环境系统：*nix（Ubuntu、OS X，不推荐windows） 软件：apache(httpd)、mysql、php7+、composer、phpstorm 库：thinkcmf、overtrue/wechat 参阅文档学习公众号开发建议参阅以下文档。 微信公众号官方技术文档 EasyWechat开发文档 ThinkCmf5开发手册 库的介绍本人推荐使用ThinkCmf5+EasyWechat进行开发。 ThinkCmfThinkCmf是基于ThinkPHP的一个内容管理系统框架，在公众号开发里，主要担当提供后台管理系统的角色\b。 ThinkPHP基本知识MVC设计模式\b由于ThinkPHP是一个使用MVC设计思想\b编写的框架，所以\b我们必须要对其有简单的了解。 模型（Model） 与数据进行交互。 在\btp里，模型主要用于\b对数据库进行增删改查。 视图（View） 提供用户界面显示。 在tp里，视图（模板）用于对html进行渲染，即按模板的格式注入数据，生成页面。 控制器（Controller） 逻辑交互的核心，处理视图与模型之间的交互。 在tp里，控制器处理用户请求的参数，调用模型获取数据，处理数据，注入到模版，返回\b页面显示结果。 其它结构\bThinkPHP除了MVC这三个核心内容，还在此基础上作出了一些扩展。 服务（S\bervice） 对模型进行封装，比如调用模型，获取分页显示等逻辑业务操作。 Api 对模型以及服务进行封装，比如检查用户权限、遍历用户文件等复杂操作。 验证器（Validate） 对用户请求参数进行验证，比如邮箱格式、手机号格式、是否必填字段等。 一些基本的方法 Controller类 Controller类对网页所需的大部分基本都进行了封装，使用起来比起原生方式难度极大的降低。 success（返回成功信息） error（返回错误信息） assign（向模板注入数据） fetch（渲染模板） Model类 Model类\b基本上就是对SQL语句进行了\b封装，使用起来比直接写SQL语句更安全、更方便。 paginate（分页显示） save（插入数据或更新数据） find（查找单行数据） alias（定义表别名） join（联表查询） order（数据排序） ThinkCmf基本知识在了解\btp的情况下，使用ThinkCmf进行开发，主要要了解以下关键点。 各场景下的控制器不同场景，需要继承的控制器也不一样，你也可以选择继承tp的控制器基类，以下为Cmf实现的几个主要控制器。 HomeBaseController 这是一个前台页面控制器，默认会往模板注入网站信息参数。 UserBaseController 这是一个用户页面控制器，继承HomeBaseController的所有特性，而且用户必须登陆才能访问其页面。 AdminBaseController 这是一个管理后台页面控制器，必须为管理员登陆时才能访问其页面。 \b前端\b开发\b\bThinkCmf使用了BootStrap3进行开发，详情\b请参阅以下文档： BootStrap - 菜鸟教程 jQuery - w3school EasyWeChat这是一个PHP的微信第三方SDK，把微信各种繁琐的操作都封装的十分的友好，所以推荐使用此库。 安装使用composer进行安装。 1composer require overtrue/wechat -vvv 如果缺少php扩展，请使用各系统下的包管理软件进行安装。 微信对接官方对接的方法很麻烦，主要就是用请求的几个参数，计算一个特定的值，返回给微信服务器，但是这一步EasyWechat已经帮我们做好了。 对接准备1.公众号（测试号） 微信公众平台 微信公众平台-测试号 注册完成后，得到appid、secret，设置好token。 2.一个带有80端口的公网服务器 \b土豪入口：阿里云 买个ECS云服务器，在上面部署。 穷逼入口：花生壳 \b交个端口映射费，下载花生壳，映射到你的开发环境。 对接请看\bEasyWechat的文档，那里写的很详细！！！ 传送门 - 对接操作 这里要注意的是，ThinkPHP不能直接调用response进行返回值，\b要通过response取得内容，然后通过echo输出、exit，或是通过die输出内容，因为thinkphp在调试模式会对页面注入一些多余的内容。方法如下： 123456$response = $app-&gt;server-&gt;serve();// 方法1die($response-&gt;getContent());// 方法2echo $response-&gt;getContent();exit(); 消息处理消息\b处理的流程一般为： 用户操作-&gt;提交给微信服务器-&gt;\b转发到我们的服务器-&gt;处理数据，返回给微信服务器-&gt;返回给用户 EasyWechat使用挂接事件的方式处理事件，详情参考文档。 传送门 - 挂接事件 消息类型在EasyWechat，消息分为两部分，一是Event，二是用户\b消息（Event以外）。 事件（Event） 用户点击菜单、扫码、上报地理位置等等行为，都会通过事件的形式传到我们的服务器。 用户消息（Event以外） 用户发送文字、图片、位置、视频、声音等等数据，都会通过消息的形式传到我们的服务器。 返回消息返回消息支持的消息类型，及创建方法，参考文档。 传送门 - 消息类型 菜单详情请参考以下文档。 传送门 - 菜单基本操作 传送门 - 菜单细节 识别用户/用户绑定（OAuth-开放验证）\b用户识别的流程为： 用户打开我们的网页 网页检测是否有已经\b验证通过的session，有则无须验证 session记录当前页面地址 \b重定向到微信服务器进行验证（提交验证方法、回调页面） 微信服务器验证通过，返回用户信息到回调页面（其实返回token，不过EasyWechat已经封装好了） 回调页面记录\b验证通过的session，跳转到之前记录的页面地址 重复1、2，通过验证。 验证方法有： snsapi_base 只获取用户的openid，无须用户确认。 snsapi_userinfo 获取用户的基本信息，无需用户确认。 snsapi_login 网页验证授权\b，\b需要用户确认。 具体方法参考文档。 传送门 - 网页授权 总结总而言之，EasyWechat的出现，使公众号开发的门槛变得很低，学会PHP的基本语法不需要很长时间，搞懂tp的基本使用也不需要很长时间，\b再有EasyWechat、ThinkCmf封装好了这么多内容，做出一个好的公众号也变得很简单。 可见以后的竞争是多么的激烈。","link":"/2018/01/23/WechatIntro/"},{"title":"关于Win10无法调整屏幕亮度的问题","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言在win10从1511更新到1803之后，出现了显卡驱动正常，但无法修改屏幕亮度的情况。 搜索了一些修复教程，但却无一成功。 总结了一下教程的关键点–驱动、监视器。 随便操作了下，成功修复，记录下。 过程 打开“设备管理器”，展开“监视器”项。 更新驱动-选择“通用即插即用监视器”。 更新驱动-选择原来的驱动。 后话也许跟teamviewer有关，不过无所谓了，能用就行。","link":"/2018/09/03/Win10Brightness/"},{"title":"Windows常用命令","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言本文专门用于介绍一些windows常用的命令，不定期更新。 简单命令\b这些命令较为简单，一般不需要\b参数。 域（Active Directory）相关命令 dcpromo 配置域控制器（win2012以前的\bserver系统） gpmc.msc 组策略管理器 adsiedit.msc 账户属性管理器\b \bgpupdate 更新计算机策略 sysdm.msc 计算机名/域管理页 系统管理相关命令 compmgmt.msc 计算机管理器 services.msc 服务管理器 目录命令这些命令可以打开位于系统位置的一些特定目录。（通过“运行”执行） inetsrv iis管理器配置目录 sysprep 系统重置工具\b目录 drivers 位于system32下，可以打开目录里的etc以编辑hosts文件 dos命令 dir 列出当前目录的文件 cd 切换工作目录 cls 清除屏幕 start 运行程序 pause 暂停，按下按键继续 复杂命令以下命令都有很多参数，作用较广。 net 123456789101112131415161718rem 修改用户密码net user username passwordrem 创建用户，用户不能修改密码，限制\b周一到周五登陆net user username password /add /passwordchg:no /time:M-F,9-18rem 创建\b组（域），及添加用户net group groupname /addnet group groupname username /addrem 创建\b\b组（本地），及添加用户net group groupname /addnet group groupname username /addrem 关闭网络映射连接/关闭共享连接net use * /delrem 查看共享net sharerem \b关闭服务net stop servicenamerem 开启服务net start servicename shutdown 1234567rem “-t 0”为0秒后进行操作，可自定义。rem 关机shutdown -s -t 0rem 重启shutdown -r -t 0rem 休眠shutdown -h sc 12rem 禁用服务sc config servicename start= disable","link":"/2018/04/27/WindowsCommand/"},{"title":"Wsl解决0x800700b7问题","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言今天将win10的server重启之后，wsl无法正常运行，提示： 1234567Installing, this may take a few minutes...WslRegisterDistribution failed with error: 0x800700b7The distribution installation has become corrupted.Please select Reset from App Settings or uninstall and reinstall the app.Error: 0x800700b7 Cannot create a file when that file already exists.Press any key to continue... 解决方案百度无解，google了一下，在github上找到了答案。 点击查看原文。 123sc query LxssManagersc stop LxssManagersc start LxssManager","link":"/2018/12/21/Wsl0x800700b7/"},{"title":"Python生成正则测试数据","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言匹配文本，最简单的方法就是使用正则表达式了。 但根据表达式生成测试数据，反过来一看，缺没什么头绪。 万幸的是，使用的是轮子遍地的python，所以只要找到相关模块就可以了。 正文可使用xeger或rstr（含xeger）模块。 这里使用xeger模块。 1pip3 install xeger 12345678from xeger import Xegerreg_str = '0\\((.+?)\\);'x = Xeger(limit=1)x._alphabets['whitespace'] = ' ' # 重定义空白字符为空格x._cases['any'] = lambda x: '.' # 重定义任意字符为.result = x.xeger(reg_str)print(result)","link":"/2018/10/12/Xeger/"},{"title":"在Windows平台安装PyCrypto","text":"版权声明：本文为博主原创文章，转载请注明出处。 前言在使用PyInstaller加密打包程序时，遇到了打包程序无法启动的问题。 查阅资料后发现是因PyCrypto未能正确安装。 首先尝试了安装替代品PyCryptoDome，后来发现并不可行。 然后编译安装PyCrypto时又出现了无法安装的问题，再以此记录。 正文遇到以下错误： 12345678910111213141516171819202122232425262728293031 ...省略部分无关内容... C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\BIN\\x86_amd64\\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -Isrc/ -Isrc/inc-msvc/ -Ic:\\users\\hsojo\\appdata\\local\\programs\\python\\python37\\include -Ic:\\users\\hsojo\\appdata\\local\\programs\\python\\python37\\include &quot;-IC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\INCLUDE&quot; &quot;-IC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\ATLMFC\\INCLUDE&quot; &quot;-IC:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt&quot; &quot;-IC:\\Program Files (x86)\\Windows Kits\\8.1\\include\\shared&quot; &quot;-IC:\\Program Files (x86)\\Windows Kits\\8.1\\include\\um&quot; &quot;-IC:\\Program Files (x86)\\Windows Kits\\8.1\\include\\winrt&quot; /Tcsrc/winrand.c /Fobuild\\temp.win-amd64-3.7\\Release\\src/winrand.obj winrand.c C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(26): error C2061: 语法错误: 标识符“intmax_t” C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(27): error C2061: 语法错误: 标识符“rem” C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(27): error C2059: 语法错误:“;” C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(28): error C2059: 语法错误:“}” C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(30): error C2061: 语法错误: 标识符“imaxdiv_t” C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(30): error C2059: 语法错误:“;” C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(40): error C2143: 语法错误: 缺少“{”(在“__cdecl”的前面) C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(41): error C2146: 语法错误: 缺少“)”(在标识符“_Number”的前面) C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(41): error C2061: 语法错误: 标识符“_Number” C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(41): error C2059: 语法错误:“;” C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(42): error C2059: 语法错误:“)” C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(45): error C2143: 语法错误: 缺少“{”(在“__cdecl”的前面) C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(46): error C2146: 语法错误: 缺少“)”(在标识符“_Numerator”的前面) C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(46): error C2061: 语法错误: 标识符“_Numerator” C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(46): error C2059: 语法错误:“;” C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(46): error C2059: 语法错误:“,” C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(48): error C2059: 语法错误:“)” C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(50): error C2143: 语法错误: 缺少“{”(在“__cdecl”的前面) C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(56): error C2143: 语法错误: 缺少“{”(在“__cdecl”的前面) C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(63): error C2143: 语法错误: 缺少“{”(在“__cdecl”的前面) C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(69): error C2143: 语法错误: 缺少“{”(在“__cdecl”的前面) C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(76): error C2143: 语法错误: 缺少“{”(在“__cdecl”的前面) C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(82): error C2143: 语法错误: 缺少“{”(在“__cdecl”的前面) C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(89): error C2143: 语法错误: 缺少“{”(在“__cdecl”的前面) C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(95): error C2143: 语法错误: 缺少“{”(在“__cdecl”的前面) error: command 'C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 14.0\\\\VC\\\\BIN\\\\x86_amd64\\\\cl.exe' failed with exit status 2 ----------------------------------------ERROR: Command errored out with exit status 1: 'c:\\applications\\virtualenv\\scripts\\python.exe' -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '&quot;'&quot;'C:\\\\Users\\\\hsojo\\\\AppData\\\\Local\\\\Temp\\\\pip-install-7z9qwwcd\\\\pycrypto\\\\setup.py'&quot;'&quot;'; __file__='&quot;'&quot;'C:\\\\Users\\\\hsojo\\\\AppData\\\\Local\\\\Temp\\\\pip-install-7z9qwwcd\\\\pycrypto\\\\setup.py'&quot;'&quot;';f=getattr(tokenize, '&quot;'&quot;'open'&quot;'&quot;', open)(__file__);code=f.read().replace('&quot;'&quot;'\\r\\n'&quot;'&quot;', '&quot;'&quot;'\\n'&quot;'&quot;');f.close();exec(compile(code, __file__, '&quot;'&quot;'exec'&quot;'&quot;'))' install --record 'C:\\Users\\hsojo\\AppData\\Local\\Temp\\pip-record-59ot1ulz\\install-record.txt' --single-version-externally-managed --compile --install-headers 'c:\\applications\\virtualenv\\include\\site\\python3.7\\pycrypto' Check the logs for full command output. 这个错误与以前转的博客几乎一致。 查阅相关资料后发现，还可以通过指定CL环境变量解决问题。 1export CL=\"/FI \\\"$VS140COMNTOOLS..\\\\..\\\\VC\\\\INCLUDE\\\\stdint.h\\\"\" 这方法，比拆包修改简单多了。","link":"/2020/07/22/PyCryptoOnWin/"}],"tags":[{"name":"python","slug":"python","link":"/tags/python/"},{"name":"hook","slug":"hook","link":"/tags/hook/"},{"name":"ftp","slug":"ftp","link":"/tags/ftp/"},{"name":"android","slug":"android","link":"/tags/android/"},{"name":"c++","slug":"c","link":"/tags/c/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"ubuntu","slug":"ubuntu","link":"/tags/ubuntu/"},{"name":"centos","slug":"centos","link":"/tags/centos/"},{"name":"samba","slug":"samba","link":"/tags/samba/"},{"name":"dns","slug":"dns","link":"/tags/dns/"},{"name":"django","slug":"django","link":"/tags/django/"},{"name":"web","slug":"web","link":"/tags/web/"},{"name":"php","slug":"php","link":"/tags/php/"},{"name":"flask","slug":"flask","link":"/tags/flask/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"kvm","slug":"kvm","link":"/tags/kvm/"},{"name":"openstack","slug":"openstack","link":"/tags/openstack/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"office","slug":"office","link":"/tags/office/"},{"name":"macos","slug":"macos","link":"/tags/macos/"},{"name":"pyinstaller","slug":"pyinstaller","link":"/tags/pyinstaller/"},{"name":"qt","slug":"qt","link":"/tags/qt/"},{"name":"windows","slug":"windows","link":"/tags/windows/"},{"name":"systemd","slug":"systemd","link":"/tags/systemd/"},{"name":"shell","slug":"shell","link":"/tags/shell/"},{"name":"vmware","slug":"vmware","link":"/tags/vmware/"},{"name":"vnc","slug":"vnc","link":"/tags/vnc/"},{"name":"wechat","slug":"wechat","link":"/tags/wechat/"}],"categories":[{"name":"软件技术","slug":"软件技术","link":"/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/"},{"name":"运维技术","slug":"运维技术","link":"/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/"},{"name":"网络技术","slug":"网络技术","link":"/categories/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"},{"name":"个人经历","slug":"个人经历","link":"/categories/%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86/"},{"name":"虚拟化技术","slug":"虚拟化技术","link":"/categories/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF/"},{"name":"网络安全","slug":"网络安全","link":"/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"}]}